// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SecurityCouncilMetaData contains all meta data concerning the SecurityCouncil contract.
var SecurityCouncilMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_colosseum\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"}],\"name\":\"DeletionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"outputRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l2BlockNumber\",\"type\":\"uint256\"}],\"name\":\"ValidationRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLOSSEUM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outputsDeleteRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_force\",\"type\":\"bool\"}],\"name\":\"requestDeletion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_l2BlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620033543803806200335483398101604081905262000035916200007a565b6001600160a01b03908116608052600160a052600060c081905260e0521661010052620000b2565b80516001600160a01b03811681146200007557600080fd5b919050565b600080604083850312156200008e57600080fd5b62000099836200005d565b9150620000a9602084016200005d565b90509250929050565b60805160a05160c05160e0516101005161323362000121600039600081816103af0152818161063401526106db01526000610d9401526000610d6b01526000610d42015260008181610319015281816107ca015281816110fb01528181611a370152611c7301526132336000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638b51d13f116100f9578063b77bf60011610097578063c642747411610071578063c642747414610448578063d0549b851461045b578063e20056e614610464578063ee22610b1461047757600080fd5b8063b77bf60014610419578063ba51a6df14610422578063c01a8c841461043557600080fd5b80639e45e8f4116100d35780639e45e8f4146103aa578063a0e67e2b146103d1578063a8abe69a146103e6578063b5dc40c31461040657600080fd5b80638b51d13f1461036157806398293ebc146103745780639ace38c21461038757600080fd5b80633411c81c1161016657806360b5bb3f1161014057806360b5bb3f146103015780636dc0ae22146103145780637065cb481461033b578063784547a71461034e57600080fd5b80633411c81c1461029d57806354741525146102cb57806354fd4d50146102ec57600080fd5b8063173825d9116101a2578063173825d91461022157806320ea8d86146102345780632a758595146102475780632f54bf6e1461027a57600080fd5b806301923371146101c9578063025e7c27146101de578063080b91ee1461020e575b600080fd5b6101dc6101d73660046129ff565b61048a565b005b6101f16101ec366004612a2b565b6106a6565b6040516001600160a01b0390911681526020015b60405180910390f35b6101dc61021c366004612b50565b6106d0565b6101dc61022f366004612bb7565b6107bf565b6101dc610242366004612a2b565b610ac1565b61026a610255366004612a2b565b60396020526000908152604090205460ff1681565b6040519015158152602001610205565b61026a610288366004612bb7565b60356020526000908152604090205460ff1681565b61026a6102ab366004612bd9565b603460209081526000928352604080842090915290825290205460ff1681565b6102de6102d9366004612bfc565b610cc6565b604051908152602001610205565b6102f4610d3b565b6040516102059190612c9c565b6101dc61030f366004612d36565b610dde565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6101dc610349366004612bb7565b611074565b61026a61035c366004612a2b565b6112c5565b6102de61036f366004612a2b565b6112d6565b6101dc610382366004612d7b565b61134d565b61039a610395366004612a2b565b6114ac565b6040516102059493929190612dd2565b6101f17f000000000000000000000000000000000000000000000000000000000000000081565b6103d961157d565b6040516102059190612e02565b6103f96103f4366004612e4f565b6115df565b6040516102059190612e95565b6103d9610414366004612a2b565b611855565b6102de60385481565b6101dc610430366004612a2b565b611a2c565b6101dc610443366004612a2b565b611b2f565b6102de610456366004612ecd565b611bc0565b6102de60375481565b6101dc610472366004612f0e565b611c68565b6101dc610485366004612a2b565b611fd0565b3360008181526035602052604090205460ff166105135760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f786973740000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008381526039602052604090205460ff16158061052e5750815b6105c75760405162461bcd60e51b8152602060048201526044602482018190527f5365637572697479436f756e63696c3a20746865206f75747075742068617320908201527f616c7265616479206265656e2072657175657374656420746f2062652064656c60648201527f6574656400000000000000000000000000000000000000000000000000000000608482015260a40161050a565b6040805160248082018690528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe39a219c00000000000000000000000000000000000000000000000000000000179052600061065a7f00000000000000000000000000000000000000000000000000000000000000008284611bc0565b600086815260396020526040808220805460ff1916600117905551919250869183917fc63c84660a471a970585c7cab9d0601af8e717ff0822a2ea049a3542fc5aa55a91a35050505050565b603681815481106106b657600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076e5760405162461bcd60e51b815260206004820152603c60248201527f5365637572697479436f756e63696c3a206f6e6c792074686520636f6c6f737360448201527f65756d20636f6e74726163742063616e20626520612073656e64657200000000606482015260840161050a565b600061077c3360008461205d565b604080518681526020810186905291925082917eef5106e82a682c776fd7748be042f406a9ee0feaaea86ae9029477c2b91f2a910160405180910390a250505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108835760405162461bcd60e51b815260206004820152604c60248201527f4d756c746953696757616c6c65743a206f6e6c7920616c6c6f7720737065636960448201527f6669656420676f7665726e6f7220636f6e747261637420746f2063616c6c207460648201527f68652066756e6374696f6e730000000000000000000000000000000000000000608482015260a40161050a565b6001600160a01b038116600090815260356020526040902054819060ff166109125760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840161050a565b6001600160a01b0382166000908152603560205260408120805460ff191690555b60365461094290600190612f67565b811015610a7057826001600160a01b03166036828154811061096657610966612f7e565b6000918252602090912001546001600160a01b031603610a68576036805461099090600190612f67565b815481106109a0576109a0612f7e565b600091825260209091200154603680546001600160a01b0390921691839081106109cc576109cc612f7e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506036805480610a0b57610a0b612fad565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055610a70565b600101610933565b506036546037541115610a8957603654610a89906121d2565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526035602052604090205460ff16610b455760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840161050a565b60008281526034602090815260408083203380855292529091205483919060ff16610bd85760405162461bcd60e51b815260206004820152603e60248201527f4d756c746953696757616c6c65743a207472616e73616374696f6e207769746860448201527f20696420616e64206f776e6572206973206e6f7420636f6e6669726d65640000606482015260840161050a565b600084815260336020526040902054849074010000000000000000000000000000000000000000900460ff1615610c775760405162461bcd60e51b815260206004820152603760248201527f4d756c746953696757616c6c65743a207472616e73616374696f6e207769746860448201527f20696420697320616c7265616479206578656375746564000000000000000000606482015260840161050a565b6000858152603460209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b6000806000805b603854811015610d325760008181526033602052604090205474010000000000000000000000000000000000000000900460ff169250858015610d0e575082155b80610d1e5750848015610d1e5750825b15610d2a578160010191505b600101610ccd565b50949350505050565b6060610d667f0000000000000000000000000000000000000000000000000000000000000000612269565b610d8f7f0000000000000000000000000000000000000000000000000000000000000000612269565b610db87f0000000000000000000000000000000000000000000000000000000000000000612269565b604051602001610dca93929190612fdc565b604051602081830303815290604052905090565b600054610100900460ff16610e5b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161050a565b815181818111158015610e6d57508015155b8015610e7857508115155b610eea5760405162461bcd60e51b815260206004820152603c60248201527f4d756c746953696757616c6c65743a206e756d626572206f662072657175697260448201527f656420636f6e6669726d6174696f6e206973206e6f742076616c696400000000606482015260840161050a565b610ef2612327565b60005b8451811015611057576000858281518110610f1257610f12612f7e565b6020908102919091018101516001600160a01b0381166000908152603590925260409091205490915060ff1615610fb05760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220616c726561647920657860448201527f6973747300000000000000000000000000000000000000000000000000000000606482015260840161050a565b6001600160a01b03811661102c5760405162461bcd60e51b815260206004820152602560248201527f4d756c746953696757616c6c65743a20696e76616c6964206f776e657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161050a565b6001600160a01b03166000908152603560205260409020805460ff1916600190811790915501610ef5565b50835161106b906036906020870190612958565b50505060375550565b806001600160a01b0381166110f05760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a2061646472657373206973206e6f74207660448201527f616c696400000000000000000000000000000000000000000000000000000000606482015260840161050a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111b45760405162461bcd60e51b815260206004820152604c60248201527f4d756c746953696757616c6c65743a206f6e6c7920616c6c6f7720737065636960448201527f6669656420676f7665726e6f7220636f6e747261637420746f2063616c6c207460648201527f68652066756e6374696f6e730000000000000000000000000000000000000000608482015260a40161050a565b6001600160a01b038216600090815260356020526040902054829060ff161561121f5760405162461bcd60e51b815260206004820152601c60248201527f4d756c746953696757616c6c65743a206f776e65722065786973747300000000604482015260640161050a565b6001600160a01b038316600081815260356020526040808220805460ff1916600190811790915560368054918201815583527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a2505050565b60006112d0826123aa565b92915050565b60008181526034602052604081208190815b603654811015611344578160006036838154811061130857611308612f7e565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561133c578260010192505b6001016112e8565b50909392505050565b600054610100900460ff161580801561136d5750600054600160ff909116105b806113875750303b158015611387575060005460ff166001145b6113f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161050a565b6000805460ff19166001179055801561143957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6114438383610dde565b80156114a657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6033602052600090815260409020805460018201546002830180546001600160a01b038416947401000000000000000000000000000000000000000090940460ff169391906114fa90613052565b80601f016020809104026020016040519081016040528092919081815260200182805461152690613052565b80156115735780601f1061154857610100808354040283529160200191611573565b820191906000526020600020905b81548152906001019060200180831161155657829003601f168201915b5050505050905084565b606060368054806020026020016040519081016040528092919081815260200182805480156115d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116115b7575b5050505050905090565b606060008080806115f08989612f67565b67ffffffffffffffff81111561160857611608612a44565b604051908082528060200260200182016040528015611631578160200160208202803683370190505b5060408051608081018252600080825260208201819052918101919091526060808201529091508992505b888310156117b057600083815260336020908152604091829020825160808101845281546001600160a01b038116825274010000000000000000000000000000000000000000900460ff161515928101929092526001810154928201929092526002820180549192916060840191906116d490613052565b80601f016020809104026020016040519081016040528092919081815260200182805461170090613052565b801561174d5780601f106117225761010080835404028352916020019161174d565b820191906000526020600020905b81548152906001019060200180831161173057829003601f168201915b50505050508152505090508060200151945087801561176a575084155b8061177a575086801561177a5750845b156117a5578282858151811061179257611792612f7e565b6020026020010181815250508360010193505b82600101925061165c565b60008467ffffffffffffffff8111156117cb576117cb612a44565b6040519080825280602002602001820160405280156117f4578160200160208202803683370190505b509050600093505b848410156118475782848151811061181657611816612f7e565b602002602001015181858151811061183057611830612f7e565b6020026020010181815250508360010193506117fc565b9a9950505050505050505050565b60365460609060009067ffffffffffffffff81111561187657611876612a44565b60405190808252806020026020018201604052801561189f578160200160208202803683370190505b5060008481526034602052604081209192509081905b60365482101561197757806000603684815481106118d5576118d5612f7e565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561196c576036828154811061191557611915612f7e565b9060005260206000200160009054906101000a90046001600160a01b031684848151811061194557611945612f7e565b60200260200101906001600160a01b031690816001600160a01b0316815250508260010192505b8160010191506118b5565b60008367ffffffffffffffff81111561199257611992612a44565b6040519080825280602002602001820160405280156119bb578160200160208202803683370190505b509050600092505b83831015611a22578483815181106119dd576119dd612f7e565b60200260200101518184815181106119f7576119f7612f7e565b60200260200101906001600160a01b031690816001600160a01b0316815250508260010192506119c3565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611af05760405162461bcd60e51b815260206004820152604c60248201527f4d756c746953696757616c6c65743a206f6e6c7920616c6c6f7720737065636960448201527f6669656420676f7665726e6f7220636f6e747261637420746f2063616c6c207460648201527f68652066756e6374696f6e730000000000000000000000000000000000000000608482015260a40161050a565b611af9816121d2565b6040518181527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9060200160405180910390a150565b3360008181526035602052604090205460ff16611bb35760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840161050a565b611bbc8261243e565b5050565b3360008181526035602052604081205490919060ff16611c475760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840161050a565b6000611c5486868661205d565b9050611c5f8161243e565b95945050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d2c5760405162461bcd60e51b815260206004820152604c60248201527f4d756c746953696757616c6c65743a206f6e6c7920616c6c6f7720737065636960448201527f6669656420676f7665726e6f7220636f6e747261637420746f2063616c6c207460648201527f68652066756e6374696f6e730000000000000000000000000000000000000000608482015260a40161050a565b806001600160a01b038116611da85760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a2061646472657373206973206e6f74207660448201527f616c696400000000000000000000000000000000000000000000000000000000606482015260840161050a565b6001600160a01b038316600090815260356020526040902054839060ff16611e375760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840161050a565b6001600160a01b038316600090815260356020526040902054839060ff1615611ea25760405162461bcd60e51b815260206004820152601c60248201527f4d756c746953696757616c6c65743a206f776e65722065786973747300000000604482015260640161050a565b60005b603654811015611f3557856001600160a01b031660368281548110611ecc57611ecc612f7e565b6000918252602090912001546001600160a01b031603611f2d578460368281548110611efa57611efa612f7e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611f35565b600101611ea5565b506001600160a01b03808616600081815260356020526040808220805460ff1990811690915593881682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038516907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a25050505050565b3360008181526035602052604090205460ff166120545760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a206f776e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840161050a565b611bbc826125ae565b6000836001600160a01b0381166120db5760405162461bcd60e51b8152602060048201526024808201527f4d756c746953696757616c6c65743a2061646472657373206973206e6f74207660448201527f616c696400000000000000000000000000000000000000000000000000000000606482015260840161050a565b603854604080516080810182526001600160a01b038089168252600060208084018281528486018b8152606086018b8152888552603390935295909220845181549351151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941694169390931791909117825592516001820155915192945091600282019061218390826130f4565b5090505060016038600082825461219a919061320e565b909155505060405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b603654818181118015906121e557508015155b80156121f057508115155b6122625760405162461bcd60e51b815260206004820152603c60248201527f4d756c746953696757616c6c65743a206e756d626572206f662072657175697260448201527f656420636f6e6669726d6174696f6e206973206e6f742076616c696400000000606482015260840161050a565b5050603755565b6060600061227683612803565b600101905060008167ffffffffffffffff81111561229657612296612a44565b6040519080825280601f01601f1916602001820160405280156122c0576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846122ca57509392505050565b600054610100900460ff166123a45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161050a565b60018055565b60008181526034602052604081208190815b60365481101561243357816000603683815481106123dc576123dc612f7e565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156124175761241460018461320e565b92505b603754830361242b57506001949350505050565b6001016123bc565b506000949350505050565b60008181526033602052604090205481906001600160a01b03166124ca5760405162461bcd60e51b815260206004820152602a60248201527f4d756c746953696757616c6c65743a207472616e73616374696f6e20646f657360448201527f206e6f7420657869737400000000000000000000000000000000000000000000606482015260840161050a565b60008281526034602090815260408083203380855292529091205483919060ff161561255e5760405162461bcd60e51b815260206004820152603a60248201527f4d756c746953696757616c6c65743a207472616e73616374696f6e207769746860448201527f20696420616e64206f776e657220697320636f6e6669726d6564000000000000606482015260840161050a565b6000848152603460209081526040808320338085529252808320805460ff191660011790555186927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36114a6845b600081815260336020526040902054819074010000000000000000000000000000000000000000900460ff161561264d5760405162461bcd60e51b815260206004820152603760248201527f4d756c746953696757616c6c65743a207472616e73616374696f6e207769746860448201527f20696420697320616c7265616479206578656375746564000000000000000000606482015260840161050a565b6126556128e5565b61265e826123aa565b156127fa57600082815260336020526040812080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000178255909190612757906001600160a01b03165a84600101548560020180546126d490613052565b80601f016020809104026020016040519081016040528092919081815260200182805461270090613052565b801561274d5780601f106127225761010080835404028352916020019161274d565b820191906000526020600020905b81548152906001019060200180831161273057829003601f168201915b505050505061293e565b9050806127cc5760405162461bcd60e51b815260206004820152602760248201527f4d756c746953696757616c6c65743a2063616c6c207472616e73616374696f6e60448201527f206661696c656400000000000000000000000000000000000000000000000000606482015260840161050a565b60405184907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a250505b611bbc60018055565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061284c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612878576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061289657662386f26fc10000830492506010015b6305f5e10083106128ae576305f5e100830492506008015b61271083106128c257612710830492506004015b606483106128d4576064830492506002015b600a83106112d05760010192915050565b6002600154036129375760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161050a565b6002600155565b600080600080845160208601878a8af19695505050505050565b8280548282559060005260206000209081019282156129c5579160200282015b828111156129c557825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190612978565b506129d19291506129d5565b5090565b5b808211156129d157600081556001016129d6565b803580151581146129fa57600080fd5b919050565b60008060408385031215612a1257600080fd5b82359150612a22602084016129ea565b90509250929050565b600060208284031215612a3d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612aba57612aba612a44565b604052919050565b600082601f830112612ad357600080fd5b813567ffffffffffffffff811115612aed57612aed612a44565b612b1e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612a73565b818152846020838601011115612b3357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215612b6557600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612b8a57600080fd5b612b9686828701612ac2565b9150509250925092565b80356001600160a01b03811681146129fa57600080fd5b600060208284031215612bc957600080fd5b612bd282612ba0565b9392505050565b60008060408385031215612bec57600080fd5b82359150612a2260208401612ba0565b60008060408385031215612c0f57600080fd5b612c18836129ea565b9150612a22602084016129ea565b60005b83811015612c41578181015183820152602001612c29565b838111156114a65750506000910152565b60008151808452612c6a816020860160208601612c26565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612bd26020830184612c52565b600082601f830112612cc057600080fd5b8135602067ffffffffffffffff821115612cdc57612cdc612a44565b8160051b612ceb828201612a73565b9283528481018201928281019087851115612d0557600080fd5b83870192505b84831015612d2b57612d1c83612ba0565b82529183019190830190612d0b565b979650505050505050565b60008060408385031215612d4957600080fd5b823567ffffffffffffffff811115612d6057600080fd5b612d6c85828601612caf565b95602094909401359450505050565b600080600060608486031215612d9057600080fd5b612d99846129ea565b9250602084013567ffffffffffffffff811115612db557600080fd5b612dc186828701612caf565b925050604084013590509250925092565b6001600160a01b03851681528315156020820152826040820152608060608201526000611a226080830184612c52565b6020808252825182820181905260009190848201906040850190845b81811015612e435783516001600160a01b031683529284019291840191600101612e1e565b50909695505050505050565b60008060008060808587031215612e6557600080fd5b8435935060208501359250612e7c604086016129ea565b9150612e8a606086016129ea565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015612e4357835183529284019291840191600101612eb1565b600080600060608486031215612ee257600080fd5b612eeb84612ba0565b925060208401359150604084013567ffffffffffffffff811115612b8a57600080fd5b60008060408385031215612f2157600080fd5b612f2a83612ba0565b9150612a2260208401612ba0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612f7957612f79612f38565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008451612fee818460208901612c26565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161302a816001850160208a01612c26565b60019201918201528351613045816002840160208801612c26565b0160020195945050505050565b600181811c9082168061306657607f821691505b60208210810361309f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156130ef57600081815260208120601f850160051c810160208610156130cc5750805b601f850160051c820191505b818110156130eb578281556001016130d8565b5050505b505050565b815167ffffffffffffffff81111561310e5761310e612a44565b6131228161311c8454613052565b846130a5565b602080601f831160018114613175576000841561313f5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556130eb565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156131c2578886015182559484019460019091019084016131a3565b50858210156131fe57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000821982111561322157613221612f38565b50019056fea164736f6c634300080f000a",
}

// SecurityCouncilABI is the input ABI used to generate the binding from.
// Deprecated: Use SecurityCouncilMetaData.ABI instead.
var SecurityCouncilABI = SecurityCouncilMetaData.ABI

// SecurityCouncilBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SecurityCouncilMetaData.Bin instead.
var SecurityCouncilBin = SecurityCouncilMetaData.Bin

// DeploySecurityCouncil deploys a new Ethereum contract, binding an instance of SecurityCouncil to it.
func DeploySecurityCouncil(auth *bind.TransactOpts, backend bind.ContractBackend, _colosseum common.Address, _governor common.Address) (common.Address, *types.Transaction, *SecurityCouncil, error) {
	parsed, err := SecurityCouncilMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SecurityCouncilBin), backend, _colosseum, _governor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SecurityCouncil{SecurityCouncilCaller: SecurityCouncilCaller{contract: contract}, SecurityCouncilTransactor: SecurityCouncilTransactor{contract: contract}, SecurityCouncilFilterer: SecurityCouncilFilterer{contract: contract}}, nil
}

// SecurityCouncil is an auto generated Go binding around an Ethereum contract.
type SecurityCouncil struct {
	SecurityCouncilCaller     // Read-only binding to the contract
	SecurityCouncilTransactor // Write-only binding to the contract
	SecurityCouncilFilterer   // Log filterer for contract events
}

// SecurityCouncilCaller is an auto generated read-only Go binding around an Ethereum contract.
type SecurityCouncilCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SecurityCouncilTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SecurityCouncilFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SecurityCouncilSession struct {
	Contract     *SecurityCouncil  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SecurityCouncilCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SecurityCouncilCallerSession struct {
	Contract *SecurityCouncilCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SecurityCouncilTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SecurityCouncilTransactorSession struct {
	Contract     *SecurityCouncilTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SecurityCouncilRaw is an auto generated low-level Go binding around an Ethereum contract.
type SecurityCouncilRaw struct {
	Contract *SecurityCouncil // Generic contract binding to access the raw methods on
}

// SecurityCouncilCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SecurityCouncilCallerRaw struct {
	Contract *SecurityCouncilCaller // Generic read-only contract binding to access the raw methods on
}

// SecurityCouncilTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SecurityCouncilTransactorRaw struct {
	Contract *SecurityCouncilTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSecurityCouncil creates a new instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncil(address common.Address, backend bind.ContractBackend) (*SecurityCouncil, error) {
	contract, err := bindSecurityCouncil(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncil{SecurityCouncilCaller: SecurityCouncilCaller{contract: contract}, SecurityCouncilTransactor: SecurityCouncilTransactor{contract: contract}, SecurityCouncilFilterer: SecurityCouncilFilterer{contract: contract}}, nil
}

// NewSecurityCouncilCaller creates a new read-only instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncilCaller(address common.Address, caller bind.ContractCaller) (*SecurityCouncilCaller, error) {
	contract, err := bindSecurityCouncil(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilCaller{contract: contract}, nil
}

// NewSecurityCouncilTransactor creates a new write-only instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncilTransactor(address common.Address, transactor bind.ContractTransactor) (*SecurityCouncilTransactor, error) {
	contract, err := bindSecurityCouncil(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTransactor{contract: contract}, nil
}

// NewSecurityCouncilFilterer creates a new log filterer instance of SecurityCouncil, bound to a specific deployed contract.
func NewSecurityCouncilFilterer(address common.Address, filterer bind.ContractFilterer) (*SecurityCouncilFilterer, error) {
	contract, err := bindSecurityCouncil(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilFilterer{contract: contract}, nil
}

// bindSecurityCouncil binds a generic wrapper to an already deployed contract.
func bindSecurityCouncil(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SecurityCouncilMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecurityCouncil *SecurityCouncilRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecurityCouncil.Contract.SecurityCouncilCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecurityCouncil *SecurityCouncilRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SecurityCouncilTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecurityCouncil *SecurityCouncilRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SecurityCouncilTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecurityCouncil *SecurityCouncilCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecurityCouncil.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecurityCouncil *SecurityCouncilTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecurityCouncil *SecurityCouncilTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.contract.Transact(opts, method, params...)
}

// COLOSSEUM is a free data retrieval call binding the contract method 0x9e45e8f4.
//
// Solidity: function COLOSSEUM() view returns(address)
func (_SecurityCouncil *SecurityCouncilCaller) COLOSSEUM(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "COLOSSEUM")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// COLOSSEUM is a free data retrieval call binding the contract method 0x9e45e8f4.
//
// Solidity: function COLOSSEUM() view returns(address)
func (_SecurityCouncil *SecurityCouncilSession) COLOSSEUM() (common.Address, error) {
	return _SecurityCouncil.Contract.COLOSSEUM(&_SecurityCouncil.CallOpts)
}

// COLOSSEUM is a free data retrieval call binding the contract method 0x9e45e8f4.
//
// Solidity: function COLOSSEUM() view returns(address)
func (_SecurityCouncil *SecurityCouncilCallerSession) COLOSSEUM() (common.Address, error) {
	return _SecurityCouncil.Contract.COLOSSEUM(&_SecurityCouncil.CallOpts)
}

// GOVERNOR is a free data retrieval call binding the contract method 0x6dc0ae22.
//
// Solidity: function GOVERNOR() view returns(address)
func (_SecurityCouncil *SecurityCouncilCaller) GOVERNOR(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "GOVERNOR")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GOVERNOR is a free data retrieval call binding the contract method 0x6dc0ae22.
//
// Solidity: function GOVERNOR() view returns(address)
func (_SecurityCouncil *SecurityCouncilSession) GOVERNOR() (common.Address, error) {
	return _SecurityCouncil.Contract.GOVERNOR(&_SecurityCouncil.CallOpts)
}

// GOVERNOR is a free data retrieval call binding the contract method 0x6dc0ae22.
//
// Solidity: function GOVERNOR() view returns(address)
func (_SecurityCouncil *SecurityCouncilCallerSession) GOVERNOR() (common.Address, error) {
	return _SecurityCouncil.Contract.GOVERNOR(&_SecurityCouncil.CallOpts)
}

// Confirmations is a free data retrieval call binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) Confirmations(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "confirmations", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Confirmations is a free data retrieval call binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) Confirmations(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.Confirmations(&_SecurityCouncil.CallOpts, arg0, arg1)
}

// Confirmations is a free data retrieval call binding the contract method 0x3411c81c.
//
// Solidity: function confirmations(uint256 , address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) Confirmations(arg0 *big.Int, arg1 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.Confirmations(&_SecurityCouncil.CallOpts, arg0, arg1)
}

// GetConfirmationCount is a free data retrieval call binding the contract method 0x8b51d13f.
//
// Solidity: function getConfirmationCount(uint256 _transactionId) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) GetConfirmationCount(opts *bind.CallOpts, _transactionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getConfirmationCount", _transactionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetConfirmationCount is a free data retrieval call binding the contract method 0x8b51d13f.
//
// Solidity: function getConfirmationCount(uint256 _transactionId) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) GetConfirmationCount(_transactionId *big.Int) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetConfirmationCount(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetConfirmationCount is a free data retrieval call binding the contract method 0x8b51d13f.
//
// Solidity: function getConfirmationCount(uint256 _transactionId) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) GetConfirmationCount(_transactionId *big.Int) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetConfirmationCount(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetConfirmations is a free data retrieval call binding the contract method 0xb5dc40c3.
//
// Solidity: function getConfirmations(uint256 _transactionId) view returns(address[])
func (_SecurityCouncil *SecurityCouncilCaller) GetConfirmations(opts *bind.CallOpts, _transactionId *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getConfirmations", _transactionId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetConfirmations is a free data retrieval call binding the contract method 0xb5dc40c3.
//
// Solidity: function getConfirmations(uint256 _transactionId) view returns(address[])
func (_SecurityCouncil *SecurityCouncilSession) GetConfirmations(_transactionId *big.Int) ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetConfirmations(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetConfirmations is a free data retrieval call binding the contract method 0xb5dc40c3.
//
// Solidity: function getConfirmations(uint256 _transactionId) view returns(address[])
func (_SecurityCouncil *SecurityCouncilCallerSession) GetConfirmations(_transactionId *big.Int) ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetConfirmations(&_SecurityCouncil.CallOpts, _transactionId)
}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_SecurityCouncil *SecurityCouncilCaller) GetOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_SecurityCouncil *SecurityCouncilSession) GetOwners() ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetOwners(&_SecurityCouncil.CallOpts)
}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_SecurityCouncil *SecurityCouncilCallerSession) GetOwners() ([]common.Address, error) {
	return _SecurityCouncil.Contract.GetOwners(&_SecurityCouncil.CallOpts)
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x54741525.
//
// Solidity: function getTransactionCount(bool _pending, bool _executed) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) GetTransactionCount(opts *bind.CallOpts, _pending bool, _executed bool) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getTransactionCount", _pending, _executed)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransactionCount is a free data retrieval call binding the contract method 0x54741525.
//
// Solidity: function getTransactionCount(bool _pending, bool _executed) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) GetTransactionCount(_pending bool, _executed bool) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionCount(&_SecurityCouncil.CallOpts, _pending, _executed)
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x54741525.
//
// Solidity: function getTransactionCount(bool _pending, bool _executed) view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) GetTransactionCount(_pending bool, _executed bool) (*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionCount(&_SecurityCouncil.CallOpts, _pending, _executed)
}

// GetTransactionIds is a free data retrieval call binding the contract method 0xa8abe69a.
//
// Solidity: function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) view returns(uint256[])
func (_SecurityCouncil *SecurityCouncilCaller) GetTransactionIds(opts *bind.CallOpts, _from *big.Int, _to *big.Int, _pending bool, _executed bool) ([]*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "getTransactionIds", _from, _to, _pending, _executed)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetTransactionIds is a free data retrieval call binding the contract method 0xa8abe69a.
//
// Solidity: function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) view returns(uint256[])
func (_SecurityCouncil *SecurityCouncilSession) GetTransactionIds(_from *big.Int, _to *big.Int, _pending bool, _executed bool) ([]*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionIds(&_SecurityCouncil.CallOpts, _from, _to, _pending, _executed)
}

// GetTransactionIds is a free data retrieval call binding the contract method 0xa8abe69a.
//
// Solidity: function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) view returns(uint256[])
func (_SecurityCouncil *SecurityCouncilCallerSession) GetTransactionIds(_from *big.Int, _to *big.Int, _pending bool, _executed bool) ([]*big.Int, error) {
	return _SecurityCouncil.Contract.GetTransactionIds(&_SecurityCouncil.CallOpts, _from, _to, _pending, _executed)
}

// IsConfirmed is a free data retrieval call binding the contract method 0x784547a7.
//
// Solidity: function isConfirmed(uint256 _transactionId) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) IsConfirmed(opts *bind.CallOpts, _transactionId *big.Int) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "isConfirmed", _transactionId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsConfirmed is a free data retrieval call binding the contract method 0x784547a7.
//
// Solidity: function isConfirmed(uint256 _transactionId) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) IsConfirmed(_transactionId *big.Int) (bool, error) {
	return _SecurityCouncil.Contract.IsConfirmed(&_SecurityCouncil.CallOpts, _transactionId)
}

// IsConfirmed is a free data retrieval call binding the contract method 0x784547a7.
//
// Solidity: function isConfirmed(uint256 _transactionId) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) IsConfirmed(_transactionId *big.Int) (bool, error) {
	return _SecurityCouncil.Contract.IsConfirmed(&_SecurityCouncil.CallOpts, _transactionId)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) IsOwner(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "isOwner", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) IsOwner(arg0 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.IsOwner(&_SecurityCouncil.CallOpts, arg0)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) IsOwner(arg0 common.Address) (bool, error) {
	return _SecurityCouncil.Contract.IsOwner(&_SecurityCouncil.CallOpts, arg0)
}

// NumConfirmationsRequired is a free data retrieval call binding the contract method 0xd0549b85.
//
// Solidity: function numConfirmationsRequired() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) NumConfirmationsRequired(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "numConfirmationsRequired")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumConfirmationsRequired is a free data retrieval call binding the contract method 0xd0549b85.
//
// Solidity: function numConfirmationsRequired() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) NumConfirmationsRequired() (*big.Int, error) {
	return _SecurityCouncil.Contract.NumConfirmationsRequired(&_SecurityCouncil.CallOpts)
}

// NumConfirmationsRequired is a free data retrieval call binding the contract method 0xd0549b85.
//
// Solidity: function numConfirmationsRequired() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) NumConfirmationsRequired() (*big.Int, error) {
	return _SecurityCouncil.Contract.NumConfirmationsRequired(&_SecurityCouncil.CallOpts)
}

// OutputsDeleteRequested is a free data retrieval call binding the contract method 0x2a758595.
//
// Solidity: function outputsDeleteRequested(uint256 ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCaller) OutputsDeleteRequested(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "outputsDeleteRequested", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OutputsDeleteRequested is a free data retrieval call binding the contract method 0x2a758595.
//
// Solidity: function outputsDeleteRequested(uint256 ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilSession) OutputsDeleteRequested(arg0 *big.Int) (bool, error) {
	return _SecurityCouncil.Contract.OutputsDeleteRequested(&_SecurityCouncil.CallOpts, arg0)
}

// OutputsDeleteRequested is a free data retrieval call binding the contract method 0x2a758595.
//
// Solidity: function outputsDeleteRequested(uint256 ) view returns(bool)
func (_SecurityCouncil *SecurityCouncilCallerSession) OutputsDeleteRequested(arg0 *big.Int) (bool, error) {
	return _SecurityCouncil.Contract.OutputsDeleteRequested(&_SecurityCouncil.CallOpts, arg0)
}

// Owners is a free data retrieval call binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) view returns(address)
func (_SecurityCouncil *SecurityCouncilCaller) Owners(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "owners", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owners is a free data retrieval call binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) view returns(address)
func (_SecurityCouncil *SecurityCouncilSession) Owners(arg0 *big.Int) (common.Address, error) {
	return _SecurityCouncil.Contract.Owners(&_SecurityCouncil.CallOpts, arg0)
}

// Owners is a free data retrieval call binding the contract method 0x025e7c27.
//
// Solidity: function owners(uint256 ) view returns(address)
func (_SecurityCouncil *SecurityCouncilCallerSession) Owners(arg0 *big.Int) (common.Address, error) {
	return _SecurityCouncil.Contract.Owners(&_SecurityCouncil.CallOpts, arg0)
}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCaller) TransactionCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "transactionCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) TransactionCount() (*big.Int, error) {
	return _SecurityCouncil.Contract.TransactionCount(&_SecurityCouncil.CallOpts)
}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_SecurityCouncil *SecurityCouncilCallerSession) TransactionCount() (*big.Int, error) {
	return _SecurityCouncil.Contract.TransactionCount(&_SecurityCouncil.CallOpts)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(address destination, bool executed, uint256 value, bytes data)
func (_SecurityCouncil *SecurityCouncilCaller) Transactions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Destination common.Address
	Executed    bool
	Value       *big.Int
	Data        []byte
}, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "transactions", arg0)

	outstruct := new(struct {
		Destination common.Address
		Executed    bool
		Value       *big.Int
		Data        []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Destination = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Executed = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.Value = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Data = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(address destination, bool executed, uint256 value, bytes data)
func (_SecurityCouncil *SecurityCouncilSession) Transactions(arg0 *big.Int) (struct {
	Destination common.Address
	Executed    bool
	Value       *big.Int
	Data        []byte
}, error) {
	return _SecurityCouncil.Contract.Transactions(&_SecurityCouncil.CallOpts, arg0)
}

// Transactions is a free data retrieval call binding the contract method 0x9ace38c2.
//
// Solidity: function transactions(uint256 ) view returns(address destination, bool executed, uint256 value, bytes data)
func (_SecurityCouncil *SecurityCouncilCallerSession) Transactions(arg0 *big.Int) (struct {
	Destination common.Address
	Executed    bool
	Value       *big.Int
	Data        []byte
}, error) {
	return _SecurityCouncil.Contract.Transactions(&_SecurityCouncil.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncil *SecurityCouncilCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecurityCouncil.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncil *SecurityCouncilSession) Version() (string, error) {
	return _SecurityCouncil.Contract.Version(&_SecurityCouncil.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncil *SecurityCouncilCallerSession) Version() (string, error) {
	return _SecurityCouncil.Contract.Version(&_SecurityCouncil.CallOpts)
}

// AddOwner is a paid mutator transaction binding the contract method 0x7065cb48.
//
// Solidity: function addOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) AddOwner(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "addOwner", _owner)
}

// AddOwner is a paid mutator transaction binding the contract method 0x7065cb48.
//
// Solidity: function addOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilSession) AddOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.AddOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// AddOwner is a paid mutator transaction binding the contract method 0x7065cb48.
//
// Solidity: function addOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) AddOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.AddOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// ChangeRequirement is a paid mutator transaction binding the contract method 0xba51a6df.
//
// Solidity: function changeRequirement(uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ChangeRequirement(opts *bind.TransactOpts, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "changeRequirement", _numConfirmationsRequired)
}

// ChangeRequirement is a paid mutator transaction binding the contract method 0xba51a6df.
//
// Solidity: function changeRequirement(uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilSession) ChangeRequirement(_numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ChangeRequirement(&_SecurityCouncil.TransactOpts, _numConfirmationsRequired)
}

// ChangeRequirement is a paid mutator transaction binding the contract method 0xba51a6df.
//
// Solidity: function changeRequirement(uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ChangeRequirement(_numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ChangeRequirement(&_SecurityCouncil.TransactOpts, _numConfirmationsRequired)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ConfirmTransaction(opts *bind.TransactOpts, _transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "confirmTransaction", _transactionId)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilSession) ConfirmTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ConfirmTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// ConfirmTransaction is a paid mutator transaction binding the contract method 0xc01a8c84.
//
// Solidity: function confirmTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ConfirmTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ConfirmTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ExecuteTransaction(opts *bind.TransactOpts, _transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "executeTransaction", _transactionId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilSession) ExecuteTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ExecuteTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// ExecuteTransaction is a paid mutator transaction binding the contract method 0xee22610b.
//
// Solidity: function executeTransaction(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ExecuteTransaction(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ExecuteTransaction(&_SecurityCouncil.TransactOpts, _transactionId)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) Initialize(opts *bind.TransactOpts, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "initialize", _owners, _numConfirmationsRequired)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilSession) Initialize(_owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize(&_SecurityCouncil.TransactOpts, _owners, _numConfirmationsRequired)
}

// Initialize is a paid mutator transaction binding the contract method 0x60b5bb3f.
//
// Solidity: function initialize(address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) Initialize(_owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize(&_SecurityCouncil.TransactOpts, _owners, _numConfirmationsRequired)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x98293ebc.
//
// Solidity: function initialize(bool , address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) Initialize0(opts *bind.TransactOpts, arg0 bool, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "initialize0", arg0, _owners, _numConfirmationsRequired)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x98293ebc.
//
// Solidity: function initialize(bool , address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilSession) Initialize0(arg0 bool, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize0(&_SecurityCouncil.TransactOpts, arg0, _owners, _numConfirmationsRequired)
}

// Initialize0 is a paid mutator transaction binding the contract method 0x98293ebc.
//
// Solidity: function initialize(bool , address[] _owners, uint256 _numConfirmationsRequired) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) Initialize0(arg0 bool, _owners []common.Address, _numConfirmationsRequired *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.Initialize0(&_SecurityCouncil.TransactOpts, arg0, _owners, _numConfirmationsRequired)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0x173825d9.
//
// Solidity: function removeOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RemoveOwner(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "removeOwner", _owner)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0x173825d9.
//
// Solidity: function removeOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilSession) RemoveOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RemoveOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0x173825d9.
//
// Solidity: function removeOwner(address _owner) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RemoveOwner(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RemoveOwner(&_SecurityCouncil.TransactOpts, _owner)
}

// ReplaceOwner is a paid mutator transaction binding the contract method 0xe20056e6.
//
// Solidity: function replaceOwner(address _owner, address _newOwner) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) ReplaceOwner(opts *bind.TransactOpts, _owner common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "replaceOwner", _owner, _newOwner)
}

// ReplaceOwner is a paid mutator transaction binding the contract method 0xe20056e6.
//
// Solidity: function replaceOwner(address _owner, address _newOwner) returns()
func (_SecurityCouncil *SecurityCouncilSession) ReplaceOwner(_owner common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ReplaceOwner(&_SecurityCouncil.TransactOpts, _owner, _newOwner)
}

// ReplaceOwner is a paid mutator transaction binding the contract method 0xe20056e6.
//
// Solidity: function replaceOwner(address _owner, address _newOwner) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) ReplaceOwner(_owner common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.ReplaceOwner(&_SecurityCouncil.TransactOpts, _owner, _newOwner)
}

// RequestDeletion is a paid mutator transaction binding the contract method 0x01923371.
//
// Solidity: function requestDeletion(uint256 _outputIndex, bool _force) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RequestDeletion(opts *bind.TransactOpts, _outputIndex *big.Int, _force bool) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "requestDeletion", _outputIndex, _force)
}

// RequestDeletion is a paid mutator transaction binding the contract method 0x01923371.
//
// Solidity: function requestDeletion(uint256 _outputIndex, bool _force) returns()
func (_SecurityCouncil *SecurityCouncilSession) RequestDeletion(_outputIndex *big.Int, _force bool) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RequestDeletion(&_SecurityCouncil.TransactOpts, _outputIndex, _force)
}

// RequestDeletion is a paid mutator transaction binding the contract method 0x01923371.
//
// Solidity: function requestDeletion(uint256 _outputIndex, bool _force) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RequestDeletion(_outputIndex *big.Int, _force bool) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RequestDeletion(&_SecurityCouncil.TransactOpts, _outputIndex, _force)
}

// RequestValidation is a paid mutator transaction binding the contract method 0x080b91ee.
//
// Solidity: function requestValidation(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes _data) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RequestValidation(opts *bind.TransactOpts, _outputRoot [32]byte, _l2BlockNumber *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "requestValidation", _outputRoot, _l2BlockNumber, _data)
}

// RequestValidation is a paid mutator transaction binding the contract method 0x080b91ee.
//
// Solidity: function requestValidation(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes _data) returns()
func (_SecurityCouncil *SecurityCouncilSession) RequestValidation(_outputRoot [32]byte, _l2BlockNumber *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RequestValidation(&_SecurityCouncil.TransactOpts, _outputRoot, _l2BlockNumber, _data)
}

// RequestValidation is a paid mutator transaction binding the contract method 0x080b91ee.
//
// Solidity: function requestValidation(bytes32 _outputRoot, uint256 _l2BlockNumber, bytes _data) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RequestValidation(_outputRoot [32]byte, _l2BlockNumber *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RequestValidation(&_SecurityCouncil.TransactOpts, _outputRoot, _l2BlockNumber, _data)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactor) RevokeConfirmation(opts *bind.TransactOpts, _transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "revokeConfirmation", _transactionId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilSession) RevokeConfirmation(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RevokeConfirmation(&_SecurityCouncil.TransactOpts, _transactionId)
}

// RevokeConfirmation is a paid mutator transaction binding the contract method 0x20ea8d86.
//
// Solidity: function revokeConfirmation(uint256 _transactionId) returns()
func (_SecurityCouncil *SecurityCouncilTransactorSession) RevokeConfirmation(_transactionId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.RevokeConfirmation(&_SecurityCouncil.TransactOpts, _transactionId)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0xc6427474.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, bytes _data) returns(uint256)
func (_SecurityCouncil *SecurityCouncilTransactor) SubmitTransaction(opts *bind.TransactOpts, _destination common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.contract.Transact(opts, "submitTransaction", _destination, _value, _data)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0xc6427474.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, bytes _data) returns(uint256)
func (_SecurityCouncil *SecurityCouncilSession) SubmitTransaction(_destination common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SubmitTransaction(&_SecurityCouncil.TransactOpts, _destination, _value, _data)
}

// SubmitTransaction is a paid mutator transaction binding the contract method 0xc6427474.
//
// Solidity: function submitTransaction(address _destination, uint256 _value, bytes _data) returns(uint256)
func (_SecurityCouncil *SecurityCouncilTransactorSession) SubmitTransaction(_destination common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _SecurityCouncil.Contract.SubmitTransaction(&_SecurityCouncil.TransactOpts, _destination, _value, _data)
}

// SecurityCouncilConfirmationIterator is returned from FilterConfirmation and is used to iterate over the raw logs and unpacked data for Confirmation events raised by the SecurityCouncil contract.
type SecurityCouncilConfirmationIterator struct {
	Event *SecurityCouncilConfirmation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilConfirmationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilConfirmation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilConfirmation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilConfirmationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilConfirmationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilConfirmation represents a Confirmation event raised by the SecurityCouncil contract.
type SecurityCouncilConfirmation struct {
	Sender        common.Address
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterConfirmation is a free log retrieval operation binding the contract event 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef.
//
// Solidity: event Confirmation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterConfirmation(opts *bind.FilterOpts, sender []common.Address, transactionId []*big.Int) (*SecurityCouncilConfirmationIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Confirmation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilConfirmationIterator{contract: _SecurityCouncil.contract, event: "Confirmation", logs: logs, sub: sub}, nil
}

// WatchConfirmation is a free log subscription operation binding the contract event 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef.
//
// Solidity: event Confirmation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchConfirmation(opts *bind.WatchOpts, sink chan<- *SecurityCouncilConfirmation, sender []common.Address, transactionId []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Confirmation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilConfirmation)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Confirmation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfirmation is a log parse operation binding the contract event 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef.
//
// Solidity: event Confirmation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseConfirmation(log types.Log) (*SecurityCouncilConfirmation, error) {
	event := new(SecurityCouncilConfirmation)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Confirmation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilDeletionRequestedIterator is returned from FilterDeletionRequested and is used to iterate over the raw logs and unpacked data for DeletionRequested events raised by the SecurityCouncil contract.
type SecurityCouncilDeletionRequestedIterator struct {
	Event *SecurityCouncilDeletionRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilDeletionRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilDeletionRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilDeletionRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilDeletionRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilDeletionRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilDeletionRequested represents a DeletionRequested event raised by the SecurityCouncil contract.
type SecurityCouncilDeletionRequested struct {
	TransactionId *big.Int
	OutputIndex   *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDeletionRequested is a free log retrieval operation binding the contract event 0xc63c84660a471a970585c7cab9d0601af8e717ff0822a2ea049a3542fc5aa55a.
//
// Solidity: event DeletionRequested(uint256 indexed transactionId, uint256 indexed outputIndex)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterDeletionRequested(opts *bind.FilterOpts, transactionId []*big.Int, outputIndex []*big.Int) (*SecurityCouncilDeletionRequestedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "DeletionRequested", transactionIdRule, outputIndexRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilDeletionRequestedIterator{contract: _SecurityCouncil.contract, event: "DeletionRequested", logs: logs, sub: sub}, nil
}

// WatchDeletionRequested is a free log subscription operation binding the contract event 0xc63c84660a471a970585c7cab9d0601af8e717ff0822a2ea049a3542fc5aa55a.
//
// Solidity: event DeletionRequested(uint256 indexed transactionId, uint256 indexed outputIndex)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchDeletionRequested(opts *bind.WatchOpts, sink chan<- *SecurityCouncilDeletionRequested, transactionId []*big.Int, outputIndex []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}
	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "DeletionRequested", transactionIdRule, outputIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilDeletionRequested)
				if err := _SecurityCouncil.contract.UnpackLog(event, "DeletionRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeletionRequested is a log parse operation binding the contract event 0xc63c84660a471a970585c7cab9d0601af8e717ff0822a2ea049a3542fc5aa55a.
//
// Solidity: event DeletionRequested(uint256 indexed transactionId, uint256 indexed outputIndex)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseDeletionRequested(log types.Log) (*SecurityCouncilDeletionRequested, error) {
	event := new(SecurityCouncilDeletionRequested)
	if err := _SecurityCouncil.contract.UnpackLog(event, "DeletionRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilExecutionIterator is returned from FilterExecution and is used to iterate over the raw logs and unpacked data for Execution events raised by the SecurityCouncil contract.
type SecurityCouncilExecutionIterator struct {
	Event *SecurityCouncilExecution // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilExecutionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilExecution)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilExecution)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilExecutionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilExecutionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilExecution represents a Execution event raised by the SecurityCouncil contract.
type SecurityCouncilExecution struct {
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterExecution is a free log retrieval operation binding the contract event 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75.
//
// Solidity: event Execution(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterExecution(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilExecutionIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Execution", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilExecutionIterator{contract: _SecurityCouncil.contract, event: "Execution", logs: logs, sub: sub}, nil
}

// WatchExecution is a free log subscription operation binding the contract event 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75.
//
// Solidity: event Execution(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchExecution(opts *bind.WatchOpts, sink chan<- *SecurityCouncilExecution, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Execution", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilExecution)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Execution", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecution is a log parse operation binding the contract event 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75.
//
// Solidity: event Execution(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseExecution(log types.Log) (*SecurityCouncilExecution, error) {
	event := new(SecurityCouncilExecution)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Execution", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilExecutionFailureIterator is returned from FilterExecutionFailure and is used to iterate over the raw logs and unpacked data for ExecutionFailure events raised by the SecurityCouncil contract.
type SecurityCouncilExecutionFailureIterator struct {
	Event *SecurityCouncilExecutionFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilExecutionFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilExecutionFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilExecutionFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilExecutionFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilExecutionFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilExecutionFailure represents a ExecutionFailure event raised by the SecurityCouncil contract.
type SecurityCouncilExecutionFailure struct {
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterExecutionFailure is a free log retrieval operation binding the contract event 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236.
//
// Solidity: event ExecutionFailure(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterExecutionFailure(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilExecutionFailureIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "ExecutionFailure", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilExecutionFailureIterator{contract: _SecurityCouncil.contract, event: "ExecutionFailure", logs: logs, sub: sub}, nil
}

// WatchExecutionFailure is a free log subscription operation binding the contract event 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236.
//
// Solidity: event ExecutionFailure(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchExecutionFailure(opts *bind.WatchOpts, sink chan<- *SecurityCouncilExecutionFailure, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "ExecutionFailure", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilExecutionFailure)
				if err := _SecurityCouncil.contract.UnpackLog(event, "ExecutionFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionFailure is a log parse operation binding the contract event 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236.
//
// Solidity: event ExecutionFailure(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseExecutionFailure(log types.Log) (*SecurityCouncilExecutionFailure, error) {
	event := new(SecurityCouncilExecutionFailure)
	if err := _SecurityCouncil.contract.UnpackLog(event, "ExecutionFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SecurityCouncil contract.
type SecurityCouncilInitializedIterator struct {
	Event *SecurityCouncilInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilInitialized represents a Initialized event raised by the SecurityCouncil contract.
type SecurityCouncilInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterInitialized(opts *bind.FilterOpts) (*SecurityCouncilInitializedIterator, error) {

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilInitializedIterator{contract: _SecurityCouncil.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SecurityCouncilInitialized) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilInitialized)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseInitialized(log types.Log) (*SecurityCouncilInitialized, error) {
	event := new(SecurityCouncilInitialized)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilOwnerAdditionIterator is returned from FilterOwnerAddition and is used to iterate over the raw logs and unpacked data for OwnerAddition events raised by the SecurityCouncil contract.
type SecurityCouncilOwnerAdditionIterator struct {
	Event *SecurityCouncilOwnerAddition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilOwnerAdditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilOwnerAddition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilOwnerAddition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilOwnerAdditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilOwnerAdditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilOwnerAddition represents a OwnerAddition event raised by the SecurityCouncil contract.
type SecurityCouncilOwnerAddition struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOwnerAddition is a free log retrieval operation binding the contract event 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d.
//
// Solidity: event OwnerAddition(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterOwnerAddition(opts *bind.FilterOpts, owner []common.Address) (*SecurityCouncilOwnerAdditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "OwnerAddition", ownerRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilOwnerAdditionIterator{contract: _SecurityCouncil.contract, event: "OwnerAddition", logs: logs, sub: sub}, nil
}

// WatchOwnerAddition is a free log subscription operation binding the contract event 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d.
//
// Solidity: event OwnerAddition(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchOwnerAddition(opts *bind.WatchOpts, sink chan<- *SecurityCouncilOwnerAddition, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "OwnerAddition", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilOwnerAddition)
				if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerAddition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerAddition is a log parse operation binding the contract event 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d.
//
// Solidity: event OwnerAddition(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseOwnerAddition(log types.Log) (*SecurityCouncilOwnerAddition, error) {
	event := new(SecurityCouncilOwnerAddition)
	if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerAddition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilOwnerRemovalIterator is returned from FilterOwnerRemoval and is used to iterate over the raw logs and unpacked data for OwnerRemoval events raised by the SecurityCouncil contract.
type SecurityCouncilOwnerRemovalIterator struct {
	Event *SecurityCouncilOwnerRemoval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilOwnerRemovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilOwnerRemoval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilOwnerRemoval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilOwnerRemovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilOwnerRemovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilOwnerRemoval represents a OwnerRemoval event raised by the SecurityCouncil contract.
type SecurityCouncilOwnerRemoval struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterOwnerRemoval is a free log retrieval operation binding the contract event 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90.
//
// Solidity: event OwnerRemoval(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterOwnerRemoval(opts *bind.FilterOpts, owner []common.Address) (*SecurityCouncilOwnerRemovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "OwnerRemoval", ownerRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilOwnerRemovalIterator{contract: _SecurityCouncil.contract, event: "OwnerRemoval", logs: logs, sub: sub}, nil
}

// WatchOwnerRemoval is a free log subscription operation binding the contract event 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90.
//
// Solidity: event OwnerRemoval(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchOwnerRemoval(opts *bind.WatchOpts, sink chan<- *SecurityCouncilOwnerRemoval, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "OwnerRemoval", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilOwnerRemoval)
				if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerRemoval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnerRemoval is a log parse operation binding the contract event 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90.
//
// Solidity: event OwnerRemoval(address indexed owner)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseOwnerRemoval(log types.Log) (*SecurityCouncilOwnerRemoval, error) {
	event := new(SecurityCouncilOwnerRemoval)
	if err := _SecurityCouncil.contract.UnpackLog(event, "OwnerRemoval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilRequirementChangeIterator is returned from FilterRequirementChange and is used to iterate over the raw logs and unpacked data for RequirementChange events raised by the SecurityCouncil contract.
type SecurityCouncilRequirementChangeIterator struct {
	Event *SecurityCouncilRequirementChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilRequirementChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilRequirementChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilRequirementChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilRequirementChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilRequirementChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilRequirementChange represents a RequirementChange event raised by the SecurityCouncil contract.
type SecurityCouncilRequirementChange struct {
	Required *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRequirementChange is a free log retrieval operation binding the contract event 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a.
//
// Solidity: event RequirementChange(uint256 required)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterRequirementChange(opts *bind.FilterOpts) (*SecurityCouncilRequirementChangeIterator, error) {

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "RequirementChange")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilRequirementChangeIterator{contract: _SecurityCouncil.contract, event: "RequirementChange", logs: logs, sub: sub}, nil
}

// WatchRequirementChange is a free log subscription operation binding the contract event 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a.
//
// Solidity: event RequirementChange(uint256 required)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchRequirementChange(opts *bind.WatchOpts, sink chan<- *SecurityCouncilRequirementChange) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "RequirementChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilRequirementChange)
				if err := _SecurityCouncil.contract.UnpackLog(event, "RequirementChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequirementChange is a log parse operation binding the contract event 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a.
//
// Solidity: event RequirementChange(uint256 required)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseRequirementChange(log types.Log) (*SecurityCouncilRequirementChange, error) {
	event := new(SecurityCouncilRequirementChange)
	if err := _SecurityCouncil.contract.UnpackLog(event, "RequirementChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilRevocationIterator is returned from FilterRevocation and is used to iterate over the raw logs and unpacked data for Revocation events raised by the SecurityCouncil contract.
type SecurityCouncilRevocationIterator struct {
	Event *SecurityCouncilRevocation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilRevocationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilRevocation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilRevocation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilRevocationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilRevocationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilRevocation represents a Revocation event raised by the SecurityCouncil contract.
type SecurityCouncilRevocation struct {
	Sender        common.Address
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRevocation is a free log retrieval operation binding the contract event 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9.
//
// Solidity: event Revocation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterRevocation(opts *bind.FilterOpts, sender []common.Address, transactionId []*big.Int) (*SecurityCouncilRevocationIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Revocation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilRevocationIterator{contract: _SecurityCouncil.contract, event: "Revocation", logs: logs, sub: sub}, nil
}

// WatchRevocation is a free log subscription operation binding the contract event 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9.
//
// Solidity: event Revocation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchRevocation(opts *bind.WatchOpts, sink chan<- *SecurityCouncilRevocation, sender []common.Address, transactionId []*big.Int) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Revocation", senderRule, transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilRevocation)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Revocation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevocation is a log parse operation binding the contract event 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9.
//
// Solidity: event Revocation(address indexed sender, uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseRevocation(log types.Log) (*SecurityCouncilRevocation, error) {
	event := new(SecurityCouncilRevocation)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Revocation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilSubmissionIterator is returned from FilterSubmission and is used to iterate over the raw logs and unpacked data for Submission events raised by the SecurityCouncil contract.
type SecurityCouncilSubmissionIterator struct {
	Event *SecurityCouncilSubmission // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilSubmissionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilSubmission)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilSubmission)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilSubmissionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilSubmissionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilSubmission represents a Submission event raised by the SecurityCouncil contract.
type SecurityCouncilSubmission struct {
	TransactionId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSubmission is a free log retrieval operation binding the contract event 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51.
//
// Solidity: event Submission(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterSubmission(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilSubmissionIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "Submission", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilSubmissionIterator{contract: _SecurityCouncil.contract, event: "Submission", logs: logs, sub: sub}, nil
}

// WatchSubmission is a free log subscription operation binding the contract event 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51.
//
// Solidity: event Submission(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchSubmission(opts *bind.WatchOpts, sink chan<- *SecurityCouncilSubmission, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "Submission", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilSubmission)
				if err := _SecurityCouncil.contract.UnpackLog(event, "Submission", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmission is a log parse operation binding the contract event 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51.
//
// Solidity: event Submission(uint256 indexed transactionId)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseSubmission(log types.Log) (*SecurityCouncilSubmission, error) {
	event := new(SecurityCouncilSubmission)
	if err := _SecurityCouncil.contract.UnpackLog(event, "Submission", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilValidationRequestedIterator is returned from FilterValidationRequested and is used to iterate over the raw logs and unpacked data for ValidationRequested events raised by the SecurityCouncil contract.
type SecurityCouncilValidationRequestedIterator struct {
	Event *SecurityCouncilValidationRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilValidationRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilValidationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilValidationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilValidationRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilValidationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilValidationRequested represents a ValidationRequested event raised by the SecurityCouncil contract.
type SecurityCouncilValidationRequested struct {
	TransactionId *big.Int
	OutputRoot    [32]byte
	L2BlockNumber *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterValidationRequested is a free log retrieval operation binding the contract event 0x00ef5106e82a682c776fd7748be042f406a9ee0feaaea86ae9029477c2b91f2a.
//
// Solidity: event ValidationRequested(uint256 indexed transactionId, bytes32 outputRoot, uint256 l2BlockNumber)
func (_SecurityCouncil *SecurityCouncilFilterer) FilterValidationRequested(opts *bind.FilterOpts, transactionId []*big.Int) (*SecurityCouncilValidationRequestedIterator, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.FilterLogs(opts, "ValidationRequested", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilValidationRequestedIterator{contract: _SecurityCouncil.contract, event: "ValidationRequested", logs: logs, sub: sub}, nil
}

// WatchValidationRequested is a free log subscription operation binding the contract event 0x00ef5106e82a682c776fd7748be042f406a9ee0feaaea86ae9029477c2b91f2a.
//
// Solidity: event ValidationRequested(uint256 indexed transactionId, bytes32 outputRoot, uint256 l2BlockNumber)
func (_SecurityCouncil *SecurityCouncilFilterer) WatchValidationRequested(opts *bind.WatchOpts, sink chan<- *SecurityCouncilValidationRequested, transactionId []*big.Int) (event.Subscription, error) {

	var transactionIdRule []interface{}
	for _, transactionIdItem := range transactionId {
		transactionIdRule = append(transactionIdRule, transactionIdItem)
	}

	logs, sub, err := _SecurityCouncil.contract.WatchLogs(opts, "ValidationRequested", transactionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilValidationRequested)
				if err := _SecurityCouncil.contract.UnpackLog(event, "ValidationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidationRequested is a log parse operation binding the contract event 0x00ef5106e82a682c776fd7748be042f406a9ee0feaaea86ae9029477c2b91f2a.
//
// Solidity: event ValidationRequested(uint256 indexed transactionId, bytes32 outputRoot, uint256 l2BlockNumber)
func (_SecurityCouncil *SecurityCouncilFilterer) ParseValidationRequested(log types.Log) (*SecurityCouncilValidationRequested, error) {
	event := new(SecurityCouncilValidationRequested)
	if err := _SecurityCouncil.contract.UnpackLog(event, "ValidationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
