// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ColosseumMetaData contains all meta data concerning the Colosseum contract.
var ColosseumMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"_l2Oracle\",\"type\":\"address\"},{\"internalType\":\"contractZKVerifier\",\"name\":\"_zkVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_submissionInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_dummyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxs\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"}],\"name\":\"ProofCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGE_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUMMY_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE\",\"outputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE_SUBMISSION_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TXS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZK_VERIFIER\",\"outputs\":[{\"internalType\":\"contractZKVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asserterTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_segments\",\"type\":\"bytes32[]\"}],\"name\":\"bisect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"challengerTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"segStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_segments\",\"type\":\"bytes32[]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengeInProgress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"segments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"segStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"structTypes.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_turn\",\"type\":\"uint256\"}],\"name\":\"getSegmentsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatusInProgress\",\"outputs\":[{\"internalType\":\"enumColosseum.ChallengeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAbleToBisect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isChallengeRelated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestChallengeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structTypes.OutputRootProof\",\"name\":\"_srcOutputRootProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"messagePasserStorageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextBlockHash\",\"type\":\"bytes32\"}],\"internalType\":\"structTypes.OutputRootProof\",\"name\":\"_dstOutputRootProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.PublicInput\",\"name\":\"_publicInput\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"parentHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"uncleHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiptsRoot\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"logsBloom\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"gasUsed\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mixHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawalsRoot\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.BlockHeaderRLP\",\"name\":\"_rlps\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pair\",\"type\":\"uint256[]\"}],\"name\":\"proveFault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101c06040523480156200001257600080fd5b506040516200426038038062004260833981016040819052620000359162000378565b60006080819052600160a05260c0526001600160a01b0380891660e0528716610100526101208590526101408690526101608490526101808390526101a082905262000081816200008f565b505050505050505062000547565b600054610100900460ff1615808015620000b05750600054600160ff909116105b80620000e05750620000cd30620001c360201b620018d31760201c565b158015620000e0575060005460ff166001145b620001495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156200016d576000805461ff0019166101001790555b6200017882620001d2565b8015620001bf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b60028151620001e29190620004a0565b15620002575760405162461bcd60e51b815260206004820152603b60248201527f436f6c6f737365756d3a206c656e677468206f66207365676d656e7473206c6560448201527f6e677468732063616e6e6f74206265206f6464206e756d6265722e0000000000606482015260840162000140565b600160005b8251811015620002e8578281815181106200027b576200027b620004c3565b602002602001015160016000838152602001908152602001600020819055506001838281518110620002b157620002b1620004c3565b6020026020010151620002c59190620004ef565b620002d1908362000509565b915080620002df816200052b565b9150506200025c565b50610140518114620001bf5760405162461bcd60e51b815260206004820152602360248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201526274687360e81b606482015260840162000140565b6001600160a01b03811681146200035f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b0312156200039657600080fd5b8851620003a38162000349565b809850506020808a0151620003b88162000349565b8098505060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015160018060401b0380821115620003f957600080fd5b818c0191508c601f8301126200040e57600080fd5b81518181111562000423576200042362000362565b8060051b604051601f19603f830116810181811085821117156200044b576200044b62000362565b60405291825284820192508381018501918f8311156200046a57600080fd5b938501935b828510156200048a578451845293850193928501926200046f565b8096505050505050509295985092959890939650565b600082620004be57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015620005045762000504620004d9565b500390565b6000816000190483118215151615620005265762000526620004d9565b500290565b600060018201620005405762000540620004d9565b5060010190565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051613c3b620006256000396000818161026f015281816113070152611375015260008181610532015261134101526000818161037901526113b70152600081816104fe0152611eaa01526000818161023b01528181610a4f01528181610fff0152611d25015260008181610492015261141c0152600081816101bd01528181610b0c01528181610c3401528181610d5601528181610f2f01526115160152600061066c015260006106430152600061061a0152613c3b6000f3fe6080604052600436106101735760003560e01c80637c96ea71116100cb5780639ded39521161007f578063cfb4474d11610059578063cfb4474d146104ec578063d5145ebc14610520578063f971fa821461055457600080fd5b80639ded395214610480578063a790d549146104b4578063bf26931f146104d657600080fd5b806385e1f4d0116100b057806385e1f4d0146103675780638f1d37761461039b5780639c58b88b1461046d57600080fd5b80637c96ea711461033f5780637ecc14be1461035457600080fd5b806354fd4d501161012d5780636dfc2fa8116101075780636dfc2fa8146102f75780636fe0e5591461030c57806371cc6a4c1461032c57600080fd5b806354fd4d5014610291578063572419a0146102b3578063647862a0146102d557600080fd5b806345eee38f1161015e57806345eee38f1461020457806350981ec7146102295780635375b8911461025d57600080fd5b806202ad2d146101785780621c2ff6146101ab575b600080fd5b34801561018457600080fd5b50610198610193366004612d74565b610574565b6040519081526020015b60405180910390f35b3480156101b757600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101a2565b34801561021057600080fd5b506102196105ee565b60405190151581526020016101a2565b34801561023557600080fd5b506101987f000000000000000000000000000000000000000000000000000000000000000081565b34801561026957600080fd5b506101987f000000000000000000000000000000000000000000000000000000000000000081565b34801561029d57600080fd5b506102a6610613565b6040516101a29190612db9565b3480156102bf57600080fd5b506102d36102ce366004612d74565b6106b6565b005b3480156102e157600080fd5b506102ea6106de565b6040516101a29190612e39565b34801561030357600080fd5b506102196106fd565b34801561031857600080fd5b506102d3610327366004612f6a565b610743565b6102d361033a36600461304c565b6108bc565b34801561034b57600080fd5b506102d3610abd565b6102d361036236600461304c565b610b87565b34801561037357600080fd5b506101987f000000000000000000000000000000000000000000000000000000000000000081565b3480156103a757600080fd5b506104176103b6366004612d74565b60026020819052600091825260409091208054600182015492820154600383015460058401546006850154600786015460089096015494969573ffffffffffffffffffffffffffffffffffffffff9485169594909316939192909160ff1688565b60408051988952602089019790975273ffffffffffffffffffffffffffffffffffffffff95861696880196909652939092166060860152608085015260a084015260c0830152151560e0820152610100016101a2565b6102d361047b3660046130d6565b611070565b34801561048c57600080fd5b506101df7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104c057600080fd5b506104c96115da565b6040516101a291906131fe565b3480156104e257600080fd5b5061019860035481565b3480156104f857600080fd5b506101987f000000000000000000000000000000000000000000000000000000000000000081565b34801561052c57600080fd5b506101987f000000000000000000000000000000000000000000000000000000000000000081565b34801561056057600080fd5b5061021961056f3660046132df565b61178d565b60008082116105ca5760405162461bcd60e51b815260206004820152601760248201527f436f6c6f737365756d3a20696e76616c6964207475726e00000000000000000060448201526064015b60405180910390fd5b600160006105d8828561332b565b8152602001908152602001600020549050919050565b6000806105f96115da565b905061060d8160c0015182602001516118ef565b91505090565b606061063e7f0000000000000000000000000000000000000000000000000000000000000000611907565b6106677f0000000000000000000000000000000000000000000000000000000000000000611907565b6106907f0000000000000000000000000000000000000000000000000000000000000000611907565b6040516020016106a293929190613342565b604051602081830303815290604052905090565b6000818152600260205260408120906106d0908290611a44565b6106da8282611be4565b5050565b60035460009081526002602052604081206106f890611cc5565b905090565b6000806107086106de565b9050600081600581111561071e5761071e612e0a565b1415801561060d5750600381600581111561073b5761073b612e0a565b141591505090565b600054610100900460ff16158080156107635750600054600160ff909116105b8061077d5750303b15801561077d575060005460ff166001145b6107ef5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105c1565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561084d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61085682611da3565b80156106da57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6003546000818152600260205260408120906108d9908290611a44565b6000816001015460016108ec91906133b8565b905061097781836004018881548110610907576109076133d0565b90600052602060002001548460040189600161092391906133b8565b81548110610933576109336133d0565b9060005260206000200154888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f3d92505050565b6000610993836006015460018461098e919061332b565b6120ea565b905060006109a182896133ff565b84600501546109b091906133b8565b90506109f38488888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525086925087915061210b9050565b600184018390556002840180546003860180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8416179091551633179055610a747f0000000000000000000000000000000000000000000000000000000000000000426133b8565b60078501556040805184815242602082015286917fda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38910160405180910390a25050505050505050565b600354600081815260026020526040812090610ada908290611a44565b80546040517f89c44cbb00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906389c44cbb90602401600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050506106da8282611be4565b610b8f6106fd565b15610c025760405162461bcd60e51b815260206004820152602c60248201527f436f6c6f737365756d3a2070726576696f7573206368616c6c656e676520697360448201527f20696e2070726f6772657373000000000000000000000000000000000000000060648201526084016105c1565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae55790602401606060405180830381865afa158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb4919061343e565b905080604001516fffffffffffffffffffffffffffffffff16600003610d1c5760405162461bcd60e51b815260206004820152601b60248201527f436f6c6f737365756d3a206f7574707574206e6f7420666f756e64000000000060448201526064016105c1565b60408051606081018252600080825260208201819052918101919091528415610de85773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a25ae557610d8660018861332b565b6040518263ffffffff1660e01b8152600401610da491815260200190565b606060405180830381865afa158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de5919061343e565b90505b610e30600182600001518460000151878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611f3d92505050565b60006003546001610e4191906133b8565b90506000600260008381526020019081526020016000209050610ecf81878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505050604086810151908801516fffffffffffffffffffffffffffffffff821691610eb8916134a3565b6fffffffffffffffffffffffffffffffff1661210b565b8681556001808201556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055604080517f393df8cb00000000000000000000000000000000000000000000000000000000815290517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169163393df8cb9160048083019260209291908290030181865afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb391906134d4565b6003820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556110247f0000000000000000000000000000000000000000000000000000000000000000426133b8565b600782015560038290556040514281528790339084907f7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb9060200160405180910390a450505050505050565b600354600081815260026020526040902061108c816001611a44565b60006110a56110a0368d90038d018d6134f1565b612135565b905080826004018d815481106110bd576110bd6133d0565b90600052602060002001541461113b5760405162461bcd60e51b815260206004820152602d60248201527f436f6c6f737365756d3a2074686520736f75726365207365676d656e74206d7560448201527f7374206265206d6174636865640000000000000000000000000000000000000060648201526084016105c1565b600061114f6110a0368d90038d018d6134f1565b905080600484016111618f60016133b8565b81548110611171576111716133d0565b9060005260206000200154036111ef5760405162461bcd60e51b815260206004820152603660248201527f436f6c6f737365756d3a207468652064657374696e6174696f6e207365676d6560448201527f6e74206d757374206e6f74206265206d6174636865640000000000000000000060648201526084016105c1565b8a606001358c608001351461126c5760405162461bcd60e51b815260206004820152602960248201527f436f6c6f737365756d3a2074686520626c6f636b2068617368206d757374206260448201527f65206d617463686564000000000000000000000000000000000000000000000060648201526084016105c1565b600061128861127a8c6135df565b6112838c613729565b6121c8565b9050808d60800135146113035760405162461bcd60e51b815260206004820152602960248201527f436f6c6f737365756d3a2074686520626c6f636b2068617368206d757374206260448201527f65206d617463686564000000000000000000000000000000000000000000000060648201526084016105c1565b60607f00000000000000000000000000000000000000000000000000000000000000006113346101208e018e61389f565b905010156113a15761139e7f000000000000000000000000000000000000000000000000000000000000000061136e6101208f018f61389f565b61139991507f000000000000000000000000000000000000000000000000000000000000000061332b565b612533565b90505b60006113dc8f602001358e6113b5906135df565b7f0000000000000000000000000000000000000000000000000000000000000000856125bf565b6040517fb864f5a900000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b864f5a990611457908e908e908e908e90600401613956565b602060405180830381865afa158015611474573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611498919061397d565b6114e45760405162461bcd60e51b815260206004820152601860248201527f436f6c6f737365756d3a20696e76616c69642070726f6f66000000000000000060448201526064016105c1565b85546040517f89c44cbb00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906389c44cbb90602401600060405180830381600087803b15801561156f57600080fd5b505af1158015611583573d6000803e3d6000fd5b505087546040519081528992507f69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8915060200160405180910390a26115c88787611be4565b50505050505050505050505050505050565b6116576040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001600081526020016000151581525090565b600380546000908152600260208181526040808420815161012081018352815481526001820154818501529381015473ffffffffffffffffffffffffffffffffffffffff908116858401529581015490951660608401526004850180548251818502810185019093528083529495939460808601938301828280156116fb57602002820191906000526020600020905b8154815260200190600101908083116116e7575b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260089092015460ff1615156080909101528101519091506117885760405162461bcd60e51b815260206004820152601e60248201527f436f6c6f737365756d3a206368616c6c656e6765206e6f7420666f756e64000060448201526064016105c1565b919050565b600380546000908152600260208181526040808420815161012081018352815481526001820154818501529381015473ffffffffffffffffffffffffffffffffffffffff90811685840152958101549095166060840152600485018054825181850281018501909352808352949586959093608086019392919083018282801561183657602002820191906000526020600020905b815481526020019060010190808311611822575b50505091835250506005820154602082015260068201546040808301919091526007830154606083015260089092015460ff16151560809091015281015190915073ffffffffffffffffffffffffffffffffffffffff848116911614806118cc57508273ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b600060016118fd84846120ea565b1190505b92915050565b60608160000361194a57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611974578061195e8161399f565b915061196d9050600a836139e8565b915061194e565b60008167ffffffffffffffff81111561198f5761198f612e7a565b6040519080825280601f01601f1916602001820160405280156119b9576020820181803683370190505b5090505b8415611a3c576119ce60018361332b565b91506119db600a866139fc565b6119e69060306133b8565b60f81b8183815181106119fb576119fb6133d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611a35600a866139e8565b94506119bd565b949350505050565b6000611a4f83611cc5565b90506000816005811115611a6557611a65612e0a565b03611ab25760405162461bcd60e51b815260206004820152601e60248201527f436f6c6f737365756d3a206368616c6c656e6765206e6f7420666f756e64000060448201526064016105c1565b6000611abd82612630565b611ae157600384015473ffffffffffffffffffffffffffffffffffffffff16611afd565b600284015473ffffffffffffffffffffffffffffffffffffffff165b905073ffffffffffffffffffffffffffffffffffffffff81163314611b645760405162461bcd60e51b815260206004820152601860248201527f436f6c6f737365756d3a206e6f7420796f7572207475726e000000000000000060448201526064016105c1565b6001836001811115611b7857611b78612e0a565b03611bde576005826005811115611b9157611b91612e0a565b14611bde5760405162461bcd60e51b815260206004820152601d60248201527f436f6c6f737365756d3a206e6f7420726561647920746f2070726f766500000060448201526064016105c1565b50505050565b600082815260026020819052604082208281556001810183905590810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155600382018054909116905590611c436004830182612cf3565b5060006005820181905560068201819055600782015560080180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560018101546040805191825242602083015283917f95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25910160405180910390a25050565b60008160010154600003611cdb57506000919050565b6000600283600101546001611cf091906133b8565b611cfa91906139fc565b6001149050611d0c8360070154421190565b15611d6f578015611d205750600392915050565b611d587f00000000000000000000000000000000000000000000000000000000000000008460070154611d5391906133b8565b421190565b15611d665750600392915050565b50600492915050565b611d81836006015484600101546118ef565b611d8e5750600592915050565b80611d9a5760026118cc565b60019392505050565b60028151611db191906139fc565b15611e245760405162461bcd60e51b815260206004820152603b60248201527f436f6c6f737365756d3a206c656e677468206f66207365676d656e7473206c6560448201527f6e677468732063616e6e6f74206265206f6464206e756d6265722e000000000060648201526084016105c1565b600160005b8251811015611ea757828181518110611e4457611e446133d0565b602002602001015160016000838152602001908152602001600020819055506001838281518110611e7757611e776133d0565b6020026020010151611e89919061332b565b611e9390836133ff565b915080611e9f8161399f565b915050611e29565b507f000000000000000000000000000000000000000000000000000000000000000081146106da5760405162461bcd60e51b815260206004820152602360248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201527f746873000000000000000000000000000000000000000000000000000000000060648201526084016105c1565b805180611f4986610574565b14611fbc5760405162461bcd60e51b815260206004820152602260248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201527f746800000000000000000000000000000000000000000000000000000000000060648201526084016105c1565b81600081518110611fcf57611fcf6133d0565b6020026020010151841461204b5760405162461bcd60e51b815260206004820152602c60248201527f436f6c6f737365756d3a20746865206669727374207365676d656e74206d757360448201527f74206265206d617463686564000000000000000000000000000000000000000060648201526084016105c1565b8161205760018361332b565b81518110612067576120676133d0565b602002602001015183036120e35760405162461bcd60e51b815260206004820152602f60248201527f436f6c6f737365756d3a20746865206c617374207365676d656e74206d75737460448201527f206e6f74206265206d617463686564000000000000000000000000000000000060648201526084016105c1565b5050505050565b600060016120f783610574565b612101919061332b565b6118cc90846139e8565b82516121209060048601906020860190612d14565b50600584019190915560069092019190915550565b80516000906121475761190182612668565b81516000190161215a57611901826126c4565b60405162461bcd60e51b815260206004820152602a60248201527f48617368696e673a20756e6b6e6f776e206f757470757420726f6f742070726f60448201527f6f662076657273696f6e0000000000000000000000000000000000000000000060648201526084016105c1565b61010081015151600090601090156121e8576121e56001826133b8565b90505b60008167ffffffffffffffff81111561220357612203612e7a565b60405190808252806020026020018201604052801561223657816020015b60608152602001906001900390816122215790505b509050836000015181600081518110612251576122516133d0565b6020026020010181905250836020015181600181518110612274576122746133d0565b602002602001018190525061228c8560000151612707565b8160028151811061229f5761229f6133d0565b60200260200101819052506122d98561010001516040516020016122c591815260200190565b604051602081830303815290604052612743565b816003815181106122ec576122ec6133d0565b60200260200101819052506123118560e001516040516020016122c591815260200190565b81600481518110612324576123246133d0565b6020026020010181905250836040015181600581518110612347576123476133d0565b602002602001018190525083606001518160068151811061236a5761236a6133d0565b602002602001018190525061238285606001516127b2565b81600781518110612395576123956133d0565b60200260200101819052506123b7856040015167ffffffffffffffff166127b2565b816008815181106123ca576123ca6133d0565b60200260200101819052506123e285608001516127b2565b816009815181106123f5576123f56133d0565b6020026020010181905250836080015181600a81518110612418576124186133d0565b602002602001018190525061243a856020015167ffffffffffffffff166127b2565b81600b8151811061244d5761244d6133d0565b60200260200101819052508360a0015181600c81518110612470576124706133d0565b60200260200101819052508360c0015181600d81518110612493576124936133d0565b60200260200101819052508360e0015181600e815181106124b6576124b66133d0565b60200260200101819052506124ce8560a001516127b2565b81600f815181106124e1576124e16133d0565b602002602001018190525081601103612519578361010001518160108151811061250d5761250d6133d0565b60200260200101819052505b612522816127c5565b805190602001209250505092915050565b606060008267ffffffffffffffff81111561255057612550612e7a565b604051908082528060200260200182016040528015612579578160200160208202803683370190505b50905060005b838110156125b7578482828151811061259a5761259a6133d0565b6020908102919091010152806125af8161399f565b91505061257f565b509392505050565b6000836000015184602001518560400151866060015187608001518860a00151888a6101200151518c8c61010001518d61012001518c6040516020016126109c9b9a99989796959493929190613a35565b604051602081830303815290604052805190602001209050949350505050565b6000600382600581111561264657612646612e0a565b14806119015750600482600581111561266157612661612e0a565b1492915050565b600081600001518260200151836040015184606001516040516020016126a7949392919093845260208401929092526040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b80516020808301516040808501516060808701516080808901518551978801989098529386019490945284015282015260a081019190915260009060c0016126a7565b604051606082811b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015290611901906034016122c5565b606080825160011480156127715750608083600081518110612767576127676133d0565b016020015160f81c105b1561277d575081611901565b61278983516080612809565b8360405160200161279b929190613aea565b604051602081830303815290604052905092915050565b60606119016127c0836129ff565b612743565b606060006127d283612b67565b90506127e0815160c0612809565b816040516020016127f2929190613aea565b604051602081830303815290604052915050919050565b6060806038841015612888576040805160018082528183019092529060208201818036833701905050905061283e8385613b19565b60f81b81600081518110612854576128546133d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506118cc565b600060015b61289781876139e8565b156128bd57816128a68161399f565b92506128b69050610100826133ff565b905061288d565b6128c88260016133b8565b67ffffffffffffffff8111156128e0576128e0612e7a565b6040519080825280601f01601f19166020018201604052801561290a576020820181803683370190505b5092506129178583613b19565b612922906037613b19565b60f81b83600081518110612938576129386133d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600190505b8181116129f657610100612980828461332b565b61298c90610100613c22565b61299690886139e8565b6129a091906139fc565b60f81b8382815181106129b5576129b56133d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806129ee8161399f565b91505061296c565b50509392505050565b6060600082604051602001612a1691815260200190565b604051602081830303815290604052905060005b6020811015612a8557818181518110612a4557612a456133d0565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016600003612a855780612a7d8161399f565b915050612a2a565b6000612a9282602061332b565b67ffffffffffffffff811115612aaa57612aaa612e7a565b6040519080825280601f01601f191660200182016040528015612ad4576020820181803683370190505b50905060005b8151811015612b5e578383612aee8161399f565b945081518110612b0057612b006133d0565b602001015160f81c60f81b828281518110612b1d57612b1d6133d0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080612b568161399f565b915050612ada565b50949350505050565b60608151600003612b8657505060408051600081526020810190915290565b6000805b8351811015612bcd57838181518110612ba557612ba56133d0565b60200260200101515182612bb991906133b8565b915080612bc58161399f565b915050612b8a565b60008267ffffffffffffffff811115612be857612be8612e7a565b6040519080825280601f01601f191660200182016040528015612c12576020820181803683370190505b50600092509050602081015b8551831015612b5e576000868481518110612c3b57612c3b6133d0565b602002602001015190506000602082019050612c5983828451612c96565b878581518110612c6b57612c6b6133d0565b60200260200101515183612c7f91906133b8565b925050508280612c8e9061399f565b935050612c1e565b8282825b60208110612cd25781518352612cb16020846133b8565b9250612cbe6020836133b8565b9150612ccb60208261332b565b9050612c9a565b905182516020929092036101000a6000190180199091169116179052505050565b5080546000825590600052602060002090810190612d119190612d5f565b50565b828054828255906000526020600020908101928215612d4f579160200282015b82811115612d4f578251825591602001919060010190612d34565b50612d5b929150612d5f565b5090565b5b80821115612d5b5760008155600101612d60565b600060208284031215612d8657600080fd5b5035919050565b60005b83811015612da8578181015183820152602001612d90565b83811115611bde5750506000910152565b6020815260008251806020840152612dd8816040850160208701612d8d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160068310612e74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715612ecd57612ecd612e7a565b60405290565b604051610120810167ffffffffffffffff81118282101715612ecd57612ecd612e7a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612f3e57612f3e612e7a565b604052919050565b600067ffffffffffffffff821115612f6057612f60612e7a565b5060051b60200190565b60006020808385031215612f7d57600080fd5b823567ffffffffffffffff811115612f9457600080fd5b8301601f81018513612fa557600080fd5b8035612fb8612fb382612f46565b612ef7565b81815260059190911b82018301908381019087831115612fd757600080fd5b928401925b82841015612ff557833582529284019290840190612fdc565b979650505050505050565b60008083601f84011261301257600080fd5b50813567ffffffffffffffff81111561302a57600080fd5b6020830191508360208260051b850101111561304557600080fd5b9250929050565b60008060006040848603121561306157600080fd5b83359250602084013567ffffffffffffffff81111561307f57600080fd5b61308b86828701613000565b9497909650939450505050565b600060a082840312156130aa57600080fd5b50919050565b600061014082840312156130aa57600080fd5b600061012082840312156130aa57600080fd5b60008060008060008060008060006101e08a8c0312156130f557600080fd5b893598506131068b60208c01613098565b97506131158b60c08c01613098565b96506101608a013567ffffffffffffffff8082111561313357600080fd5b61313f8d838e016130b0565b97506101808c013591508082111561315657600080fd5b6131628d838e016130c3565b96506101a08c013591508082111561317957600080fd5b6131858d838e01613000565b90965094506101c08c013591508082111561319f57600080fd5b506131ac8c828d01613000565b915080935050809150509295985092959850929598565b600081518084526020808501945080840160005b838110156131f3578151875295820195908201906001016131d7565b509495945050505050565b6020815281516020820152602082015160408201526000604083015161323c606084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015173ffffffffffffffffffffffffffffffffffffffff811660808401525060808301516101208060a085015261327b6101408501836131c3565b915060a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506129f68286018215159052565b73ffffffffffffffffffffffffffffffffffffffff81168114612d1157600080fd5b8035611788816132b2565b6000602082840312156132f157600080fd5b81356118cc816132b2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561333d5761333d6132fc565b500390565b60008451613354818460208901612d8d565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551613390816001850160208a01612d8d565b600192019182015283516133ab816002840160208801612d8d565b0160020195945050505050565b600082198211156133cb576133cb6132fc565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000816000190483118215151615613419576134196132fc565b500290565b80516fffffffffffffffffffffffffffffffff8116811461178857600080fd5b60006060828403121561345057600080fd5b6040516060810181811067ffffffffffffffff8211171561347357613473612e7a565b604052825181526134866020840161341e565b60208201526134976040840161341e565b60408201529392505050565b60006fffffffffffffffffffffffffffffffff838116908316818110156134cc576134cc6132fc565b039392505050565b6000602082840312156134e657600080fd5b81516118cc816132b2565b600060a0828403121561350357600080fd5b60405160a0810181811067ffffffffffffffff8211171561352657613526612e7a565b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b803567ffffffffffffffff8116811461178857600080fd5b600082601f83011261358a57600080fd5b8135602061359a612fb383612f46565b82815260059290921b840181019181810190868411156135b957600080fd5b8286015b848110156135d457803583529183019183016135bd565b509695505050505050565b600061014082360312156135f257600080fd5b6135fa612ea9565b613603836132d4565b815261361160208401613561565b602082015261362260408401613561565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013567ffffffffffffffff81111561368157600080fd5b61368d36828701613579565b918301919091525092915050565b600082601f8301126136ac57600080fd5b813567ffffffffffffffff8111156136c6576136c6612e7a565b6136f760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612ef7565b81815284602083860101111561370c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000610120823603121561373c57600080fd5b613744612ed3565b823567ffffffffffffffff8082111561375c57600080fd5b6137683683870161369b565b8352602085013591508082111561377e57600080fd5b61378a3683870161369b565b602084015260408501359150808211156137a357600080fd5b6137af3683870161369b565b604084015260608501359150808211156137c857600080fd5b6137d43683870161369b565b606084015260808501359150808211156137ed57600080fd5b6137f93683870161369b565b608084015260a085013591508082111561381257600080fd5b61381e3683870161369b565b60a084015260c085013591508082111561383757600080fd5b6138433683870161369b565b60c084015260e085013591508082111561385c57600080fd5b6138683683870161369b565b60e08401526101009150818501358181111561388357600080fd5b61388f3682880161369b565b8385015250505080915050919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126138d457600080fd5b83018035915067ffffffffffffffff8211156138ef57600080fd5b6020019150600581901b360382131561304557600080fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561393957600080fd5b8260051b8083602087013760009401602001938452509192915050565b60408152600061396a604083018688613907565b8281036020840152612ff5818587613907565b60006020828403121561398f57600080fd5b815180151581146118cc57600080fd5b600060001982036139b2576139b26132fc565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826139f7576139f76139b9565b500490565b600082613a0b57613a0b6139b9565b500690565b805160009060208084018383156131f3578151875295820195908201906001016131d7565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008d60601b16815260007fffffffffffffffff000000000000000000000000000000000000000000000000808e60c01b166014840152808d60c01b16601c840152508a60248301528960448301528860648301528760848301528660a48301528560c48301528460e4830152613ad8613ad2610104840186613a10565b84613a10565b9e9d5050505050505050505050505050565b60008351613afc818460208801612d8d565b835190830190613b10818360208801612d8d565b01949350505050565b600060ff821660ff84168060ff03821115613b3657613b366132fc565b019392505050565b600181815b80851115613b79578160001904821115613b5f57613b5f6132fc565b80851615613b6c57918102915b93841c9390800290613b43565b509250929050565b600082613b9057506001611901565b81613b9d57506000611901565b8160018114613bb35760028114613bbd57613bd9565b6001915050611901565b60ff841115613bce57613bce6132fc565b50506001821b611901565b5060208310610133831016604e8410600b8410161715613bfc575081810a611901565b613c068383613b3e565b8060001904821115613c1a57613c1a6132fc565b029392505050565b60006118cc8383613b8156fea164736f6c634300080f000a",
}

// ColosseumABI is the input ABI used to generate the binding from.
// Deprecated: Use ColosseumMetaData.ABI instead.
var ColosseumABI = ColosseumMetaData.ABI

// ColosseumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ColosseumMetaData.Bin instead.
var ColosseumBin = ColosseumMetaData.Bin

// DeployColosseum deploys a new Ethereum contract, binding an instance of Colosseum to it.
func DeployColosseum(auth *bind.TransactOpts, backend bind.ContractBackend, _l2Oracle common.Address, _zkVerifier common.Address, _submissionInterval *big.Int, _challengeTimeout *big.Int, _chainId *big.Int, _dummyHash [32]byte, _maxTxs *big.Int, _segmentsLengths []*big.Int) (common.Address, *types.Transaction, *Colosseum, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ColosseumBin), backend, _l2Oracle, _zkVerifier, _submissionInterval, _challengeTimeout, _chainId, _dummyHash, _maxTxs, _segmentsLengths)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// Colosseum is an auto generated Go binding around an Ethereum contract.
type Colosseum struct {
	ColosseumCaller     // Read-only binding to the contract
	ColosseumTransactor // Write-only binding to the contract
	ColosseumFilterer   // Log filterer for contract events
}

// ColosseumCaller is an auto generated read-only Go binding around an Ethereum contract.
type ColosseumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ColosseumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ColosseumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ColosseumSession struct {
	Contract     *Colosseum        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ColosseumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ColosseumCallerSession struct {
	Contract *ColosseumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ColosseumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ColosseumTransactorSession struct {
	Contract     *ColosseumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ColosseumRaw is an auto generated low-level Go binding around an Ethereum contract.
type ColosseumRaw struct {
	Contract *Colosseum // Generic contract binding to access the raw methods on
}

// ColosseumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ColosseumCallerRaw struct {
	Contract *ColosseumCaller // Generic read-only contract binding to access the raw methods on
}

// ColosseumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ColosseumTransactorRaw struct {
	Contract *ColosseumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewColosseum creates a new instance of Colosseum, bound to a specific deployed contract.
func NewColosseum(address common.Address, backend bind.ContractBackend) (*Colosseum, error) {
	contract, err := bindColosseum(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// NewColosseumCaller creates a new read-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumCaller(address common.Address, caller bind.ContractCaller) (*ColosseumCaller, error) {
	contract, err := bindColosseum(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumCaller{contract: contract}, nil
}

// NewColosseumTransactor creates a new write-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumTransactor(address common.Address, transactor bind.ContractTransactor) (*ColosseumTransactor, error) {
	contract, err := bindColosseum(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumTransactor{contract: contract}, nil
}

// NewColosseumFilterer creates a new log filterer instance of Colosseum, bound to a specific deployed contract.
func NewColosseumFilterer(address common.Address, filterer bind.ContractFilterer) (*ColosseumFilterer, error) {
	contract, err := bindColosseum(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ColosseumFilterer{contract: contract}, nil
}

// bindColosseum binds a generic wrapper to an already deployed contract.
func bindColosseum(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.ColosseumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transact(opts, method, params...)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_Colosseum *ColosseumCaller) CHAINID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "CHAIN_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_Colosseum *ColosseumSession) CHAINID() (*big.Int, error) {
	return _Colosseum.Contract.CHAINID(&_Colosseum.CallOpts)
}

// CHAINID is a free data retrieval call binding the contract method 0x85e1f4d0.
//
// Solidity: function CHAIN_ID() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) CHAINID() (*big.Int, error) {
	return _Colosseum.Contract.CHAINID(&_Colosseum.CallOpts)
}

// CHALLENGETIMEOUT is a free data retrieval call binding the contract method 0x50981ec7.
//
// Solidity: function CHALLENGE_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCaller) CHALLENGETIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "CHALLENGE_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHALLENGETIMEOUT is a free data retrieval call binding the contract method 0x50981ec7.
//
// Solidity: function CHALLENGE_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumSession) CHALLENGETIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.CHALLENGETIMEOUT(&_Colosseum.CallOpts)
}

// CHALLENGETIMEOUT is a free data retrieval call binding the contract method 0x50981ec7.
//
// Solidity: function CHALLENGE_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) CHALLENGETIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.CHALLENGETIMEOUT(&_Colosseum.CallOpts)
}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumCaller) DUMMYHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "DUMMY_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumSession) DUMMYHASH() ([32]byte, error) {
	return _Colosseum.Contract.DUMMYHASH(&_Colosseum.CallOpts)
}

// DUMMYHASH is a free data retrieval call binding the contract method 0xd5145ebc.
//
// Solidity: function DUMMY_HASH() view returns(bytes32)
func (_Colosseum *ColosseumCallerSession) DUMMYHASH() ([32]byte, error) {
	return _Colosseum.Contract.DUMMYHASH(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCallerSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCaller) L2ORACLESUBMISSIONINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE_SUBMISSION_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumCaller) MAXTXS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "MAX_TXS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumSession) MAXTXS() (*big.Int, error) {
	return _Colosseum.Contract.MAXTXS(&_Colosseum.CallOpts)
}

// MAXTXS is a free data retrieval call binding the contract method 0x5375b891.
//
// Solidity: function MAX_TXS() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) MAXTXS() (*big.Int, error) {
	return _Colosseum.Contract.MAXTXS(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCaller) ZKVERIFIER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "ZK_VERIFIER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCallerSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns(uint256 outputIndex, uint256 turn, address current, address next, uint256 segStart, uint256 segSize, uint256 timeoutAt, bool closed)
func (_Colosseum *ColosseumCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "challenges", arg0)

	outstruct := new(struct {
		OutputIndex *big.Int
		Turn        *big.Int
		Current     common.Address
		Next        common.Address
		SegStart    *big.Int
		SegSize     *big.Int
		TimeoutAt   *big.Int
		Closed      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OutputIndex = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Turn = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Current = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Next = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.SegStart = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SegSize = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.TimeoutAt = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Closed = *abi.ConvertType(out[7], new(bool)).(*bool)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns(uint256 outputIndex, uint256 turn, address current, address next, uint256 segStart, uint256 segSize, uint256 timeoutAt, bool closed)
func (_Colosseum *ColosseumSession) Challenges(arg0 *big.Int) (struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns(uint256 outputIndex, uint256 turn, address current, address next, uint256 segStart, uint256 segSize, uint256 timeoutAt, bool closed)
func (_Colosseum *ColosseumCallerSession) Challenges(arg0 *big.Int) (struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0)
}

// GetChallengeInProgress is a free data retrieval call binding the contract method 0xa790d549.
//
// Solidity: function getChallengeInProgress() view returns((uint256,uint256,address,address,bytes32[],uint256,uint256,uint256,bool))
func (_Colosseum *ColosseumCaller) GetChallengeInProgress(opts *bind.CallOpts) (TypesChallenge, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getChallengeInProgress")

	if err != nil {
		return *new(TypesChallenge), err
	}

	out0 := *abi.ConvertType(out[0], new(TypesChallenge)).(*TypesChallenge)

	return out0, err

}

// GetChallengeInProgress is a free data retrieval call binding the contract method 0xa790d549.
//
// Solidity: function getChallengeInProgress() view returns((uint256,uint256,address,address,bytes32[],uint256,uint256,uint256,bool))
func (_Colosseum *ColosseumSession) GetChallengeInProgress() (TypesChallenge, error) {
	return _Colosseum.Contract.GetChallengeInProgress(&_Colosseum.CallOpts)
}

// GetChallengeInProgress is a free data retrieval call binding the contract method 0xa790d549.
//
// Solidity: function getChallengeInProgress() view returns((uint256,uint256,address,address,bytes32[],uint256,uint256,uint256,bool))
func (_Colosseum *ColosseumCallerSession) GetChallengeInProgress() (TypesChallenge, error) {
	return _Colosseum.Contract.GetChallengeInProgress(&_Colosseum.CallOpts)
}

// GetSegmentsLength is a free data retrieval call binding the contract method 0x0002ad2d.
//
// Solidity: function getSegmentsLength(uint256 _turn) view returns(uint256)
func (_Colosseum *ColosseumCaller) GetSegmentsLength(opts *bind.CallOpts, _turn *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getSegmentsLength", _turn)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSegmentsLength is a free data retrieval call binding the contract method 0x0002ad2d.
//
// Solidity: function getSegmentsLength(uint256 _turn) view returns(uint256)
func (_Colosseum *ColosseumSession) GetSegmentsLength(_turn *big.Int) (*big.Int, error) {
	return _Colosseum.Contract.GetSegmentsLength(&_Colosseum.CallOpts, _turn)
}

// GetSegmentsLength is a free data retrieval call binding the contract method 0x0002ad2d.
//
// Solidity: function getSegmentsLength(uint256 _turn) view returns(uint256)
func (_Colosseum *ColosseumCallerSession) GetSegmentsLength(_turn *big.Int) (*big.Int, error) {
	return _Colosseum.Contract.GetSegmentsLength(&_Colosseum.CallOpts, _turn)
}

// GetStatusInProgress is a free data retrieval call binding the contract method 0x647862a0.
//
// Solidity: function getStatusInProgress() view returns(uint8)
func (_Colosseum *ColosseumCaller) GetStatusInProgress(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getStatusInProgress")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatusInProgress is a free data retrieval call binding the contract method 0x647862a0.
//
// Solidity: function getStatusInProgress() view returns(uint8)
func (_Colosseum *ColosseumSession) GetStatusInProgress() (uint8, error) {
	return _Colosseum.Contract.GetStatusInProgress(&_Colosseum.CallOpts)
}

// GetStatusInProgress is a free data retrieval call binding the contract method 0x647862a0.
//
// Solidity: function getStatusInProgress() view returns(uint8)
func (_Colosseum *ColosseumCallerSession) GetStatusInProgress() (uint8, error) {
	return _Colosseum.Contract.GetStatusInProgress(&_Colosseum.CallOpts)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x45eee38f.
//
// Solidity: function isAbleToBisect() view returns(bool)
func (_Colosseum *ColosseumCaller) IsAbleToBisect(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isAbleToBisect")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x45eee38f.
//
// Solidity: function isAbleToBisect() view returns(bool)
func (_Colosseum *ColosseumSession) IsAbleToBisect() (bool, error) {
	return _Colosseum.Contract.IsAbleToBisect(&_Colosseum.CallOpts)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x45eee38f.
//
// Solidity: function isAbleToBisect() view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsAbleToBisect() (bool, error) {
	return _Colosseum.Contract.IsAbleToBisect(&_Colosseum.CallOpts)
}

// IsChallengeRelated is a free data retrieval call binding the contract method 0xf971fa82.
//
// Solidity: function isChallengeRelated(address _account) view returns(bool)
func (_Colosseum *ColosseumCaller) IsChallengeRelated(opts *bind.CallOpts, _account common.Address) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isChallengeRelated", _account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChallengeRelated is a free data retrieval call binding the contract method 0xf971fa82.
//
// Solidity: function isChallengeRelated(address _account) view returns(bool)
func (_Colosseum *ColosseumSession) IsChallengeRelated(_account common.Address) (bool, error) {
	return _Colosseum.Contract.IsChallengeRelated(&_Colosseum.CallOpts, _account)
}

// IsChallengeRelated is a free data retrieval call binding the contract method 0xf971fa82.
//
// Solidity: function isChallengeRelated(address _account) view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsChallengeRelated(_account common.Address) (bool, error) {
	return _Colosseum.Contract.IsChallengeRelated(&_Colosseum.CallOpts, _account)
}

// IsInProgress is a free data retrieval call binding the contract method 0x6dfc2fa8.
//
// Solidity: function isInProgress() view returns(bool)
func (_Colosseum *ColosseumCaller) IsInProgress(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isInProgress")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInProgress is a free data retrieval call binding the contract method 0x6dfc2fa8.
//
// Solidity: function isInProgress() view returns(bool)
func (_Colosseum *ColosseumSession) IsInProgress() (bool, error) {
	return _Colosseum.Contract.IsInProgress(&_Colosseum.CallOpts)
}

// IsInProgress is a free data retrieval call binding the contract method 0x6dfc2fa8.
//
// Solidity: function isInProgress() view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsInProgress() (bool, error) {
	return _Colosseum.Contract.IsInProgress(&_Colosseum.CallOpts)
}

// LatestChallengeId is a free data retrieval call binding the contract method 0xbf26931f.
//
// Solidity: function latestChallengeId() view returns(uint256)
func (_Colosseum *ColosseumCaller) LatestChallengeId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "latestChallengeId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestChallengeId is a free data retrieval call binding the contract method 0xbf26931f.
//
// Solidity: function latestChallengeId() view returns(uint256)
func (_Colosseum *ColosseumSession) LatestChallengeId() (*big.Int, error) {
	return _Colosseum.Contract.LatestChallengeId(&_Colosseum.CallOpts)
}

// LatestChallengeId is a free data retrieval call binding the contract method 0xbf26931f.
//
// Solidity: function latestChallengeId() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) LatestChallengeId() (*big.Int, error) {
	return _Colosseum.Contract.LatestChallengeId(&_Colosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCallerSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// AsserterTimeout is a paid mutator transaction binding the contract method 0x7c96ea71.
//
// Solidity: function asserterTimeout() returns()
func (_Colosseum *ColosseumTransactor) AsserterTimeout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "asserterTimeout")
}

// AsserterTimeout is a paid mutator transaction binding the contract method 0x7c96ea71.
//
// Solidity: function asserterTimeout() returns()
func (_Colosseum *ColosseumSession) AsserterTimeout() (*types.Transaction, error) {
	return _Colosseum.Contract.AsserterTimeout(&_Colosseum.TransactOpts)
}

// AsserterTimeout is a paid mutator transaction binding the contract method 0x7c96ea71.
//
// Solidity: function asserterTimeout() returns()
func (_Colosseum *ColosseumTransactorSession) AsserterTimeout() (*types.Transaction, error) {
	return _Colosseum.Contract.AsserterTimeout(&_Colosseum.TransactOpts)
}

// Bisect is a paid mutator transaction binding the contract method 0x71cc6a4c.
//
// Solidity: function bisect(uint256 _pos, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactor) Bisect(opts *bind.TransactOpts, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "bisect", _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0x71cc6a4c.
//
// Solidity: function bisect(uint256 _pos, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumSession) Bisect(_pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0x71cc6a4c.
//
// Solidity: function bisect(uint256 _pos, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactorSession) Bisect(_pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _pos, _segments)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x572419a0.
//
// Solidity: function challengerTimeout(uint256 _challengeId) returns()
func (_Colosseum *ColosseumTransactor) ChallengerTimeout(opts *bind.TransactOpts, _challengeId *big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "challengerTimeout", _challengeId)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x572419a0.
//
// Solidity: function challengerTimeout(uint256 _challengeId) returns()
func (_Colosseum *ColosseumSession) ChallengerTimeout(_challengeId *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _challengeId)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x572419a0.
//
// Solidity: function challengerTimeout(uint256 _challengeId) returns()
func (_Colosseum *ColosseumTransactorSession) ChallengerTimeout(_challengeId *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _challengeId)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x7ecc14be.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactor) CreateChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "createChallenge", _outputIndex, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x7ecc14be.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumSession) CreateChallenge(_outputIndex *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x7ecc14be.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactorSession) CreateChallenge(_outputIndex *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _segments)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactor) Initialize(opts *bind.TransactOpts, _segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "initialize", _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactorSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// ProveFault is a paid mutator transaction binding the contract method 0x9c58b88b.
//
// Solidity: function proveFault(uint256 _pos, (bytes32,bytes32,bytes32,bytes32,bytes32) _srcOutputRootProof, (bytes32,bytes32,bytes32,bytes32,bytes32) _dstOutputRootProof, (address,uint64,uint64,uint256,uint256,uint256,uint256,bytes32,bytes32,bytes32[]) _publicInput, (bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes) _rlps, uint256[] _proof, uint256[] _pair) payable returns()
func (_Colosseum *ColosseumTransactor) ProveFault(opts *bind.TransactOpts, _pos *big.Int, _srcOutputRootProof TypesOutputRootProof, _dstOutputRootProof TypesOutputRootProof, _publicInput TypesPublicInput, _rlps TypesBlockHeaderRLP, _proof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "proveFault", _pos, _srcOutputRootProof, _dstOutputRootProof, _publicInput, _rlps, _proof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x9c58b88b.
//
// Solidity: function proveFault(uint256 _pos, (bytes32,bytes32,bytes32,bytes32,bytes32) _srcOutputRootProof, (bytes32,bytes32,bytes32,bytes32,bytes32) _dstOutputRootProof, (address,uint64,uint64,uint256,uint256,uint256,uint256,bytes32,bytes32,bytes32[]) _publicInput, (bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes) _rlps, uint256[] _proof, uint256[] _pair) payable returns()
func (_Colosseum *ColosseumSession) ProveFault(_pos *big.Int, _srcOutputRootProof TypesOutputRootProof, _dstOutputRootProof TypesOutputRootProof, _publicInput TypesPublicInput, _rlps TypesBlockHeaderRLP, _proof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _pos, _srcOutputRootProof, _dstOutputRootProof, _publicInput, _rlps, _proof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x9c58b88b.
//
// Solidity: function proveFault(uint256 _pos, (bytes32,bytes32,bytes32,bytes32,bytes32) _srcOutputRootProof, (bytes32,bytes32,bytes32,bytes32,bytes32) _dstOutputRootProof, (address,uint64,uint64,uint256,uint256,uint256,uint256,bytes32,bytes32,bytes32[]) _publicInput, (bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes) _rlps, uint256[] _proof, uint256[] _pair) payable returns()
func (_Colosseum *ColosseumTransactorSession) ProveFault(_pos *big.Int, _srcOutputRootProof TypesOutputRootProof, _dstOutputRootProof TypesOutputRootProof, _publicInput TypesPublicInput, _rlps TypesBlockHeaderRLP, _proof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _pos, _srcOutputRootProof, _dstOutputRootProof, _publicInput, _rlps, _proof, _pair)
}

// ColosseumBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Colosseum contract.
type ColosseumBisectedIterator struct {
	Event *ColosseumBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumBisected represents a Bisected event raised by the Colosseum contract.
type ColosseumBisected struct {
	ChallengeId *big.Int
	Turn        *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0xda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38.
//
// Solidity: event Bisected(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterBisected(opts *bind.FilterOpts, challengeId []*big.Int) (*ColosseumBisectedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Bisected", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumBisectedIterator{contract: _Colosseum.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0xda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38.
//
// Solidity: event Bisected(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ColosseumBisected, challengeId []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Bisected", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumBisected)
				if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0xda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38.
//
// Solidity: event Bisected(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseBisected(log types.Log) (*ColosseumBisected, error) {
	event := new(ColosseumBisected)
	if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeCreatedIterator is returned from FilterChallengeCreated and is used to iterate over the raw logs and unpacked data for ChallengeCreated events raised by the Colosseum contract.
type ColosseumChallengeCreatedIterator struct {
	Event *ColosseumChallengeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeCreated represents a ChallengeCreated event raised by the Colosseum contract.
type ColosseumChallengeCreated struct {
	ChallengeId *big.Int
	Challenger  common.Address
	OutputIndex *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCreated is a free log retrieval operation binding the contract event 0x7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb.
//
// Solidity: event ChallengeCreated(uint256 indexed challengeId, address indexed challenger, uint256 indexed outputIndex, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeCreated(opts *bind.FilterOpts, challengeId []*big.Int, challenger []common.Address, outputIndex []*big.Int) (*ColosseumChallengeCreatedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}
	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeCreated", challengeIdRule, challengerRule, outputIndexRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeCreatedIterator{contract: _Colosseum.contract, event: "ChallengeCreated", logs: logs, sub: sub}, nil
}

// WatchChallengeCreated is a free log subscription operation binding the contract event 0x7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb.
//
// Solidity: event ChallengeCreated(uint256 indexed challengeId, address indexed challenger, uint256 indexed outputIndex, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeCreated(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeCreated, challengeId []*big.Int, challenger []common.Address, outputIndex []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}
	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeCreated", challengeIdRule, challengerRule, outputIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeCreated)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCreated is a log parse operation binding the contract event 0x7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb.
//
// Solidity: event ChallengeCreated(uint256 indexed challengeId, address indexed challenger, uint256 indexed outputIndex, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeCreated(log types.Log) (*ColosseumChallengeCreated, error) {
	event := new(ColosseumChallengeCreated)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumClosedIterator is returned from FilterClosed and is used to iterate over the raw logs and unpacked data for Closed events raised by the Colosseum contract.
type ColosseumClosedIterator struct {
	Event *ColosseumClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumClosed represents a Closed event raised by the Colosseum contract.
type ColosseumClosed struct {
	ChallengeId *big.Int
	Turn        *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterClosed is a free log retrieval operation binding the contract event 0x95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25.
//
// Solidity: event Closed(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterClosed(opts *bind.FilterOpts, challengeId []*big.Int) (*ColosseumClosedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Closed", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumClosedIterator{contract: _Colosseum.contract, event: "Closed", logs: logs, sub: sub}, nil
}

// WatchClosed is a free log subscription operation binding the contract event 0x95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25.
//
// Solidity: event Closed(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchClosed(opts *bind.WatchOpts, sink chan<- *ColosseumClosed, challengeId []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Closed", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumClosed)
				if err := _Colosseum.contract.UnpackLog(event, "Closed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClosed is a log parse operation binding the contract event 0x95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25.
//
// Solidity: event Closed(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseClosed(log types.Log) (*ColosseumClosed, error) {
	event := new(ColosseumClosed)
	if err := _Colosseum.contract.UnpackLog(event, "Closed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Colosseum contract.
type ColosseumInitializedIterator struct {
	Event *ColosseumInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumInitialized represents a Initialized event raised by the Colosseum contract.
type ColosseumInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) FilterInitialized(opts *bind.FilterOpts) (*ColosseumInitializedIterator, error) {

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ColosseumInitializedIterator{contract: _Colosseum.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ColosseumInitialized) (event.Subscription, error) {

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumInitialized)
				if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) ParseInitialized(log types.Log) (*ColosseumInitialized, error) {
	event := new(ColosseumInitialized)
	if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumProofCompletedIterator is returned from FilterProofCompleted and is used to iterate over the raw logs and unpacked data for ProofCompleted events raised by the Colosseum contract.
type ColosseumProofCompletedIterator struct {
	Event *ColosseumProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumProofCompleted represents a ProofCompleted event raised by the Colosseum contract.
type ColosseumProofCompleted struct {
	ChallengeId *big.Int
	OutputIndex *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProofCompleted is a free log retrieval operation binding the contract event 0x69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8.
//
// Solidity: event ProofCompleted(uint256 indexed challengeId, uint256 outputIndex)
func (_Colosseum *ColosseumFilterer) FilterProofCompleted(opts *bind.FilterOpts, challengeId []*big.Int) (*ColosseumProofCompletedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ProofCompleted", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumProofCompletedIterator{contract: _Colosseum.contract, event: "ProofCompleted", logs: logs, sub: sub}, nil
}

// WatchProofCompleted is a free log subscription operation binding the contract event 0x69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8.
//
// Solidity: event ProofCompleted(uint256 indexed challengeId, uint256 outputIndex)
func (_Colosseum *ColosseumFilterer) WatchProofCompleted(opts *bind.WatchOpts, sink chan<- *ColosseumProofCompleted, challengeId []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ProofCompleted", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumProofCompleted)
				if err := _Colosseum.contract.UnpackLog(event, "ProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofCompleted is a log parse operation binding the contract event 0x69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8.
//
// Solidity: event ProofCompleted(uint256 indexed challengeId, uint256 outputIndex)
func (_Colosseum *ColosseumFilterer) ParseProofCompleted(log types.Log) (*ColosseumProofCompleted, error) {
	event := new(ColosseumProofCompleted)
	if err := _Colosseum.contract.UnpackLog(event, "ProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
