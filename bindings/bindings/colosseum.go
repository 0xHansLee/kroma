// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TypesChallenge is an auto generated low-level Go binding around an user-defined struct.
type TypesChallenge struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	Segments    [][32]byte
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}

// ColosseumMetaData contains all meta data concerning the Colosseum contract.
var ColosseumMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"_l2Oracle\",\"type\":\"address\"},{\"internalType\":\"contractZKVerifier\",\"name\":\"_zkVerifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_submissionInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bisected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"}],\"name\":\"ProofCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE\",\"outputs\":[{\"internalType\":\"contractL2OutputOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_ORACLE_SUBMISSION_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZK_VERIFIER\",\"outputs\":[{\"internalType\":\"contractZKVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asserterTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_segments\",\"type\":\"bytes32[]\"}],\"name\":\"bisect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"challengerTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"segStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_segments\",\"type\":\"bytes32[]\"}],\"name\":\"createChallenge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengeInProgress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outputIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"segments\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"segStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"internalType\":\"structTypes.Challenge\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_turn\",\"type\":\"uint256\"}],\"name\":\"getSegmentsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatusInProgress\",\"outputs\":[{\"internalType\":\"enumColosseum.ChallengeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_segmentsLengths\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAbleToBisect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isChallengeRelated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestChallengeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_outputRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pair\",\"type\":\"uint256[]\"}],\"name\":\"proveFault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101606040523480156200001257600080fd5b5060405162002be938038062002be9833981016040819052620000359162000363565b60006080819052600160a05260c0526001600160a01b0380861660e0528416610100526101208290526101408390526200006f816200007a565b505050505062000516565b600054610100900460ff16158080156200009b5750600054600160ff909116105b80620000cb5750620000b830620001ae60201b620015491760201c565b158015620000cb575060005460ff166001145b620001345760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000158576000805461ff0019166101001790555b6200016382620001bd565b8015620001aa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03163b151590565b60028151620001cd91906200046f565b15620002425760405162461bcd60e51b815260206004820152603b60248201527f436f6c6f737365756d3a206c656e677468206f66207365676d656e7473206c6560448201527f6e677468732063616e6e6f74206265206f6464206e756d6265722e000000000060648201526084016200012b565b600160005b8251811015620002d35782818151811062000266576200026662000492565b6020026020010151600160008381526020019081526020016000208190555060018382815181106200029c576200029c62000492565b6020026020010151620002b09190620004be565b620002bc9083620004d8565b915080620002ca81620004fa565b91505062000247565b50610140518114620001aa5760405162461bcd60e51b815260206004820152602360248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201526274687360e81b60648201526084016200012b565b6001600160a01b03811681146200034a57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200037c57600080fd5b8551620003898162000334565b809550506020808701516200039e8162000334565b6040880151606089015160808a015192975090955093506001600160401b0380821115620003cb57600080fd5b818901915089601f830112620003e057600080fd5b815181811115620003f557620003f56200034d565b8060051b604051601f19603f830116810181811085821117156200041d576200041d6200034d565b60405291825284820192508381018501918c8311156200043c57600080fd5b938501935b828510156200045c5784518452938501939285019262000441565b8096505050505050509295509295909350565b6000826200048d57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015620004d357620004d3620004a8565b500390565b6000816000190483118215151615620004f557620004f5620004a8565b500290565b6000600182016200050f576200050f620004a8565b5060010190565b60805160a05160c05160e051610100516101205161014051612632620005b7600039600081816104650152611b1e01526000818161021f01528181610c2f015281816111df01526119990152600081816103f9015261061801526000818161018c0152818161071201528181610cec01528181610e1401528181610f36015261110f0152600061084c01526000610823015260006107fa01526126326000f3fe6080604052600436106101425760003560e01c80636fe0e559116100c05780639ded395211610074578063bf26931f11610059578063bf26931f1461043d578063cfb4474d14610453578063f971fa821461048757600080fd5b80639ded3952146103e7578063a790d5491461041b57600080fd5b80637c96ea71116100a55780637c96ea71146102ed5780637ecc14be146103025780638f1d37761461031557600080fd5b80636fe0e559146102ba57806371cc6a4c146102da57600080fd5b806350981ec711610117578063572419a0116100fc578063572419a014610263578063647862a0146102835780636dfc2fa8146102a557600080fd5b806350981ec71461020d57806354fd4d501461024157600080fd5b806202ad2d146101475780621c2ff61461017a5780632da294fa146101d357806345eee38f146101e8575b600080fd5b34801561015357600080fd5b50610167610162366004611e63565b6104a7565b6040519081526020015b60405180910390f35b34801561018657600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610171565b6101e66101e1366004611ec8565b610521565b005b3480156101f457600080fd5b506101fd6107ce565b6040519015158152602001610171565b34801561021957600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b34801561024d57600080fd5b506102566107f3565b6040516101719190611f77565b34801561026f57600080fd5b506101e661027e366004611e63565b610896565b34801561028f57600080fd5b506102986108be565b6040516101719190611ff7565b3480156102b157600080fd5b506101fd6108dd565b3480156102c657600080fd5b506101e66102d53660046120b6565b610923565b6101e66102e836600461215c565b610a9c565b3480156102f957600080fd5b506101e6610c9d565b6101e661031036600461215c565b610d67565b34801561032157600080fd5b50610391610330366004611e63565b60026020819052600091825260409091208054600182015492820154600383015460058401546006850154600786015460089096015494969573ffffffffffffffffffffffffffffffffffffffff9485169594909316939192909160ff1688565b60408051988952602089019790975273ffffffffffffffffffffffffffffffffffffffff95861696880196909652939092166060860152608085015260a084015260c0830152151560e082015261010001610171565b3480156103f357600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042757600080fd5b50610430611250565b60405161017191906121e3565b34801561044957600080fd5b5061016760035481565b34801561045f57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b34801561049357600080fd5b506101fd6104a23660046122c3565b611403565b60008082116104fd5760405162461bcd60e51b815260206004820152601760248201527f436f6c6f737365756d3a20696e76616c6964207475726e00000000000000000060448201526064015b60405180910390fd5b6001600061050b828561230f565b8152602001908152602001600020549050919050565b600354600081815260026020526040902061053d816001611565565b866004820161054d8a6001612326565b8154811061055d5761055d61233e565b9060005260206000200154036105db5760405162461bcd60e51b815260206004820152602f60248201527f436f6c6f737365756d3a20746865206c617374207365676d656e74206d75737460448201527f206e6f74206265206d617463686564000000000000000000000000000000000060648201526084016104f4565b6040517fb864f5a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b864f5a9906106539089908990899089906004016123bc565b602060405180830381865afa158015610670573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069491906123ee565b6106e05760405162461bcd60e51b815260206004820152601860248201527f436f6c6f737365756d3a20696e76616c69642070726f6f66000000000000000060448201526064016104f4565b80546040517f89c44cbb00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906389c44cbb90602401600060405180830381600087803b15801561076b57600080fd5b505af115801561077f573d6000803e3d6000fd5b505082546040519081528492507f69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8915060200160405180910390a26107c48282611705565b5050505050505050565b6000806107d9611250565b90506107ed8160c0015182602001516117e6565b91505090565b606061081e7f00000000000000000000000000000000000000000000000000000000000000006117fc565b6108477f00000000000000000000000000000000000000000000000000000000000000006117fc565b6108707f00000000000000000000000000000000000000000000000000000000000000006117fc565b60405160200161088293929190612410565b604051602081830303815290604052905090565b6000818152600260205260408120906108b0908290611565565b6108ba8282611705565b5050565b60035460009081526002602052604081206108d890611939565b905090565b6000806108e86108be565b905060008160058111156108fe576108fe611fc8565b141580156107ed5750600381600581111561091b5761091b611fc8565b141591505090565b600054610100900460ff16158080156109435750600054600160ff909116105b8061095d5750303b15801561095d575060005460ff166001145b6109cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104f4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a2d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610a3682611a17565b80156108ba57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600354600081815260026020526040812090610ab9908290611565565b600081600101546001610acc9190612326565b9050610b5781836004018881548110610ae757610ae761233e565b906000526020600020015484600401896001610b039190612326565b81548110610b1357610b1361233e565b9060005260206000200154888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611bb192505050565b6000610b738360060154600184610b6e919061230f565b611d5e565b90506000610b818289612486565b8460050154610b909190612326565b9050610bd384888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250879150611d7f9050565b600184018390556002840180546003860180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8416179091551633179055610c547f000000000000000000000000000000000000000000000000000000000000000042612326565b60078501556040805184815242602082015286917fda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38910160405180910390a25050505050505050565b600354600081815260026020526040812090610cba908290611565565b80546040517f89c44cbb00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906389c44cbb90602401600060405180830381600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505050506108ba8282611705565b610d6f6108dd565b15610de25760405162461bcd60e51b815260206004820152602c60248201527f436f6c6f737365756d3a2070726576696f7573206368616c6c656e676520697360448201527f20696e2070726f6772657373000000000000000000000000000000000000000060648201526084016104f4565b6040517fa25ae557000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a25ae55790602401606060405180830381865afa158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9491906124e3565b905080604001516fffffffffffffffffffffffffffffffff16600003610efc5760405162461bcd60e51b815260206004820152601b60248201527f436f6c6f737365756d3a206f7574707574206e6f7420666f756e64000000000060448201526064016104f4565b60408051606081018252600080825260208201819052918101919091528415610fc85773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a25ae557610f6660018861230f565b6040518263ffffffff1660e01b8152600401610f8491815260200190565b606060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc591906124e3565b90505b611010600182600001518460000151878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611bb192505050565b600060035460016110219190612326565b905060006002600083815260200190815260200160002090506110af81878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505050604086810151908801516fffffffffffffffffffffffffffffffff82169161109891612548565b6fffffffffffffffffffffffffffffffff16611d7f565b8681556001808201556002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055604080517f393df8cb00000000000000000000000000000000000000000000000000000000815290517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169163393df8cb9160048083019260209291908290030181865afa15801561116f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111939190612579565b6003820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556112047f000000000000000000000000000000000000000000000000000000000000000042612326565b600782015560038290556040514281528790339084907f7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb9060200160405180910390a450505050505050565b6112cd6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001600081526020016000151581525090565b600380546000908152600260208181526040808420815161012081018352815481526001820154818501529381015473ffffffffffffffffffffffffffffffffffffffff9081168584015295810154909516606084015260048501805482518185028101850190935280835294959394608086019383018282801561137157602002820191906000526020600020905b81548152602001906001019080831161135d575b50505091835250506005820154602080830191909152600683015460408301526007830154606083015260089092015460ff1615156080909101528101519091506113fe5760405162461bcd60e51b815260206004820152601e60248201527f436f6c6f737365756d3a206368616c6c656e6765206e6f7420666f756e64000060448201526064016104f4565b919050565b600380546000908152600260208181526040808420815161012081018352815481526001820154818501529381015473ffffffffffffffffffffffffffffffffffffffff9081168584015295810154909516606084015260048501805482518185028101850190935280835294958695909360808601939291908301828280156114ac57602002820191906000526020600020905b815481526020019060010190808311611498575b50505091835250506005820154602082015260068201546040808301919091526007830154606083015260089092015460ff16151560809091015281015190915073ffffffffffffffffffffffffffffffffffffffff8481169116148061154257508273ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b600061157083611939565b9050600081600581111561158657611586611fc8565b036115d35760405162461bcd60e51b815260206004820152601e60248201527f436f6c6f737365756d3a206368616c6c656e6765206e6f7420666f756e64000060448201526064016104f4565b60006115de82611da9565b61160257600384015473ffffffffffffffffffffffffffffffffffffffff1661161e565b600284015473ffffffffffffffffffffffffffffffffffffffff165b905073ffffffffffffffffffffffffffffffffffffffff811633146116855760405162461bcd60e51b815260206004820152601860248201527f436f6c6f737365756d3a206e6f7420796f7572207475726e000000000000000060448201526064016104f4565b600183600181111561169957611699611fc8565b036116ff5760058260058111156116b2576116b2611fc8565b146116ff5760405162461bcd60e51b815260206004820152601d60248201527f436f6c6f737365756d3a206e6f7420726561647920746f2070726f766500000060448201526064016104f4565b50505050565b600082815260026020819052604082208281556001810183905590810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556003820180549091169055906117646004830182611de2565b5060006005820181905560068201819055600782015560080180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905560018101546040805191825242602083015283917f95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25910160405180910390a25050565b600060016117f48484611d5e565b119392505050565b60608160000361183f57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115611869578061185381612596565b91506118629050600a836125fd565b9150611843565b60008167ffffffffffffffff81111561188457611884612038565b6040519080825280601f01601f1916602001820160405280156118ae576020820181803683370190505b5090505b8415611931576118c360018361230f565b91506118d0600a86612611565b6118db906030612326565b60f81b8183815181106118f0576118f061233e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061192a600a866125fd565b94506118b2565b949350505050565b6000816001015460000361194f57506000919050565b60006002836001015460016119649190612326565b61196e9190612611565b60011490506119808360070154421190565b156119e35780156119945750600392915050565b6119cc7f000000000000000000000000000000000000000000000000000000000000000084600701546119c79190612326565b421190565b156119da5750600392915050565b50600492915050565b6119f5836006015484600101546117e6565b611a025750600592915050565b80611a0e576002611542565b60019392505050565b60028151611a259190612611565b15611a985760405162461bcd60e51b815260206004820152603b60248201527f436f6c6f737365756d3a206c656e677468206f66207365676d656e7473206c6560448201527f6e677468732063616e6e6f74206265206f6464206e756d6265722e000000000060648201526084016104f4565b600160005b8251811015611b1b57828181518110611ab857611ab861233e565b602002602001015160016000838152602001908152602001600020819055506001838281518110611aeb57611aeb61233e565b6020026020010151611afd919061230f565b611b079083612486565b915080611b1381612596565b915050611a9d565b507f000000000000000000000000000000000000000000000000000000000000000081146108ba5760405162461bcd60e51b815260206004820152602360248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201527f746873000000000000000000000000000000000000000000000000000000000060648201526084016104f4565b805180611bbd866104a7565b14611c305760405162461bcd60e51b815260206004820152602260248201527f436f6c6f737365756d3a20696e76616c6964207365676d656e7473206c656e6760448201527f746800000000000000000000000000000000000000000000000000000000000060648201526084016104f4565b81600081518110611c4357611c4361233e565b60200260200101518414611cbf5760405162461bcd60e51b815260206004820152602c60248201527f436f6c6f737365756d3a20746865206669727374207365676d656e74206d757360448201527f74206265206d617463686564000000000000000000000000000000000000000060648201526084016104f4565b81611ccb60018361230f565b81518110611cdb57611cdb61233e565b60200260200101518303611d575760405162461bcd60e51b815260206004820152602f60248201527f436f6c6f737365756d3a20746865206c617374207365676d656e74206d75737460448201527f206e6f74206265206d617463686564000000000000000000000000000000000060648201526084016104f4565b5050505050565b60006001611d6b836104a7565b611d75919061230f565b61154290846125fd565b8251611d949060048601906020860190611e03565b50600584019190915560069092019190915550565b60006003826005811115611dbf57611dbf611fc8565b1480611ddc57506004826005811115611dda57611dda611fc8565b145b92915050565b5080546000825590600052602060002090810190611e009190611e4e565b50565b828054828255906000526020600020908101928215611e3e579160200282015b82811115611e3e578251825591602001919060010190611e23565b50611e4a929150611e4e565b5090565b5b80821115611e4a5760008155600101611e4f565b600060208284031215611e7557600080fd5b5035919050565b60008083601f840112611e8e57600080fd5b50813567ffffffffffffffff811115611ea657600080fd5b6020830191508360208260051b8501011115611ec157600080fd5b9250929050565b60008060008060008060808789031215611ee157600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115611f0757600080fd5b611f138a838b01611e7c565b90965094506060890135915080821115611f2c57600080fd5b50611f3989828a01611e7c565b979a9699509497509295939492505050565b60005b83811015611f66578181015183820152602001611f4e565b838111156116ff5750506000910152565b6020815260008251806020840152611f96816040850160208701611f4b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160068310612032577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156120ae576120ae612038565b604052919050565b600060208083850312156120c957600080fd5b823567ffffffffffffffff808211156120e157600080fd5b818501915085601f8301126120f557600080fd5b81358181111561210757612107612038565b8060051b9150612118848301612067565b818152918301840191848101908884111561213257600080fd5b938501935b8385101561215057843582529385019390850190612137565b98975050505050505050565b60008060006040848603121561217157600080fd5b83359250602084013567ffffffffffffffff81111561218f57600080fd5b61219b86828701611e7c565b9497909650939450505050565b600081518084526020808501945080840160005b838110156121d8578151875295820195908201906001016121bc565b509495945050505050565b60208152815160208201526020820151604082015260006040830151612221606084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015173ffffffffffffffffffffffffffffffffffffffff811660808401525060808301516101208060a08501526122606101408501836121a8565b915060a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506122978286018215159052565b5090949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611e0057600080fd5b6000602082840312156122d557600080fd5b8135611542816122a1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612321576123216122e0565b500390565b60008219821115612339576123396122e0565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561239f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040815260006123d060408301868861236d565b82810360208401526123e381858761236d565b979650505050505050565b60006020828403121561240057600080fd5b8151801515811461154257600080fd5b60008451612422818460208901611f4b565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161245e816001850160208a01611f4b565b60019201918201528351612479816002840160208801611f4b565b0160020195945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124be576124be6122e0565b500290565b80516fffffffffffffffffffffffffffffffff811681146113fe57600080fd5b6000606082840312156124f557600080fd5b6040516060810181811067ffffffffffffffff8211171561251857612518612038565b6040528251815261252b602084016124c3565b602082015261253c604084016124c3565b60408201529392505050565b60006fffffffffffffffffffffffffffffffff83811690831681811015612571576125716122e0565b039392505050565b60006020828403121561258b57600080fd5b8151611542816122a1565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125c7576125c76122e0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261260c5761260c6125ce565b500490565b600082612620576126206125ce565b50069056fea164736f6c634300080f000a",
}

// ColosseumABI is the input ABI used to generate the binding from.
// Deprecated: Use ColosseumMetaData.ABI instead.
var ColosseumABI = ColosseumMetaData.ABI

// ColosseumBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ColosseumMetaData.Bin instead.
var ColosseumBin = ColosseumMetaData.Bin

// DeployColosseum deploys a new Ethereum contract, binding an instance of Colosseum to it.
func DeployColosseum(auth *bind.TransactOpts, backend bind.ContractBackend, _l2Oracle common.Address, _zkVerifier common.Address, _submissionInterval *big.Int, _challengeTimeout *big.Int, _segmentsLengths []*big.Int) (common.Address, *types.Transaction, *Colosseum, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ColosseumBin), backend, _l2Oracle, _zkVerifier, _submissionInterval, _challengeTimeout, _segmentsLengths)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// Colosseum is an auto generated Go binding around an Ethereum contract.
type Colosseum struct {
	ColosseumCaller     // Read-only binding to the contract
	ColosseumTransactor // Write-only binding to the contract
	ColosseumFilterer   // Log filterer for contract events
}

// ColosseumCaller is an auto generated read-only Go binding around an Ethereum contract.
type ColosseumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ColosseumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ColosseumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ColosseumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ColosseumSession struct {
	Contract     *Colosseum        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ColosseumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ColosseumCallerSession struct {
	Contract *ColosseumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ColosseumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ColosseumTransactorSession struct {
	Contract     *ColosseumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ColosseumRaw is an auto generated low-level Go binding around an Ethereum contract.
type ColosseumRaw struct {
	Contract *Colosseum // Generic contract binding to access the raw methods on
}

// ColosseumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ColosseumCallerRaw struct {
	Contract *ColosseumCaller // Generic read-only contract binding to access the raw methods on
}

// ColosseumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ColosseumTransactorRaw struct {
	Contract *ColosseumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewColosseum creates a new instance of Colosseum, bound to a specific deployed contract.
func NewColosseum(address common.Address, backend bind.ContractBackend) (*Colosseum, error) {
	contract, err := bindColosseum(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Colosseum{ColosseumCaller: ColosseumCaller{contract: contract}, ColosseumTransactor: ColosseumTransactor{contract: contract}, ColosseumFilterer: ColosseumFilterer{contract: contract}}, nil
}

// NewColosseumCaller creates a new read-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumCaller(address common.Address, caller bind.ContractCaller) (*ColosseumCaller, error) {
	contract, err := bindColosseum(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumCaller{contract: contract}, nil
}

// NewColosseumTransactor creates a new write-only instance of Colosseum, bound to a specific deployed contract.
func NewColosseumTransactor(address common.Address, transactor bind.ContractTransactor) (*ColosseumTransactor, error) {
	contract, err := bindColosseum(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ColosseumTransactor{contract: contract}, nil
}

// NewColosseumFilterer creates a new log filterer instance of Colosseum, bound to a specific deployed contract.
func NewColosseumFilterer(address common.Address, filterer bind.ContractFilterer) (*ColosseumFilterer, error) {
	contract, err := bindColosseum(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ColosseumFilterer{contract: contract}, nil
}

// bindColosseum binds a generic wrapper to an already deployed contract.
func bindColosseum(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ColosseumMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.ColosseumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.ColosseumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Colosseum *ColosseumCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Colosseum.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Colosseum *ColosseumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Colosseum *ColosseumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Colosseum.Contract.contract.Transact(opts, method, params...)
}

// CHALLENGETIMEOUT is a free data retrieval call binding the contract method 0x50981ec7.
//
// Solidity: function CHALLENGE_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCaller) CHALLENGETIMEOUT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "CHALLENGE_TIMEOUT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CHALLENGETIMEOUT is a free data retrieval call binding the contract method 0x50981ec7.
//
// Solidity: function CHALLENGE_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumSession) CHALLENGETIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.CHALLENGETIMEOUT(&_Colosseum.CallOpts)
}

// CHALLENGETIMEOUT is a free data retrieval call binding the contract method 0x50981ec7.
//
// Solidity: function CHALLENGE_TIMEOUT() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) CHALLENGETIMEOUT() (*big.Int, error) {
	return _Colosseum.Contract.CHALLENGETIMEOUT(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCaller) L2ORACLE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLE is a free data retrieval call binding the contract method 0x001c2ff6.
//
// Solidity: function L2_ORACLE() view returns(address)
func (_Colosseum *ColosseumCallerSession) L2ORACLE() (common.Address, error) {
	return _Colosseum.Contract.L2ORACLE(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCaller) L2ORACLESUBMISSIONINTERVAL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "L2_ORACLE_SUBMISSION_INTERVAL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// L2ORACLESUBMISSIONINTERVAL is a free data retrieval call binding the contract method 0xcfb4474d.
//
// Solidity: function L2_ORACLE_SUBMISSION_INTERVAL() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) L2ORACLESUBMISSIONINTERVAL() (*big.Int, error) {
	return _Colosseum.Contract.L2ORACLESUBMISSIONINTERVAL(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCaller) ZKVERIFIER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "ZK_VERIFIER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// ZKVERIFIER is a free data retrieval call binding the contract method 0x9ded3952.
//
// Solidity: function ZK_VERIFIER() view returns(address)
func (_Colosseum *ColosseumCallerSession) ZKVERIFIER() (common.Address, error) {
	return _Colosseum.Contract.ZKVERIFIER(&_Colosseum.CallOpts)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns(uint256 outputIndex, uint256 turn, address current, address next, uint256 segStart, uint256 segSize, uint256 timeoutAt, bool closed)
func (_Colosseum *ColosseumCaller) Challenges(opts *bind.CallOpts, arg0 *big.Int) (struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "challenges", arg0)

	outstruct := new(struct {
		OutputIndex *big.Int
		Turn        *big.Int
		Current     common.Address
		Next        common.Address
		SegStart    *big.Int
		SegSize     *big.Int
		TimeoutAt   *big.Int
		Closed      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OutputIndex = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Turn = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Current = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Next = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.SegStart = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SegSize = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.TimeoutAt = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Closed = *abi.ConvertType(out[7], new(bool)).(*bool)

	return *outstruct, err

}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns(uint256 outputIndex, uint256 turn, address current, address next, uint256 segStart, uint256 segSize, uint256 timeoutAt, bool closed)
func (_Colosseum *ColosseumSession) Challenges(arg0 *big.Int) (struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0)
}

// Challenges is a free data retrieval call binding the contract method 0x8f1d3776.
//
// Solidity: function challenges(uint256 ) view returns(uint256 outputIndex, uint256 turn, address current, address next, uint256 segStart, uint256 segSize, uint256 timeoutAt, bool closed)
func (_Colosseum *ColosseumCallerSession) Challenges(arg0 *big.Int) (struct {
	OutputIndex *big.Int
	Turn        *big.Int
	Current     common.Address
	Next        common.Address
	SegStart    *big.Int
	SegSize     *big.Int
	TimeoutAt   *big.Int
	Closed      bool
}, error) {
	return _Colosseum.Contract.Challenges(&_Colosseum.CallOpts, arg0)
}

// GetChallengeInProgress is a free data retrieval call binding the contract method 0xa790d549.
//
// Solidity: function getChallengeInProgress() view returns((uint256,uint256,address,address,bytes32[],uint256,uint256,uint256,bool))
func (_Colosseum *ColosseumCaller) GetChallengeInProgress(opts *bind.CallOpts) (TypesChallenge, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getChallengeInProgress")

	if err != nil {
		return *new(TypesChallenge), err
	}

	out0 := *abi.ConvertType(out[0], new(TypesChallenge)).(*TypesChallenge)

	return out0, err

}

// GetChallengeInProgress is a free data retrieval call binding the contract method 0xa790d549.
//
// Solidity: function getChallengeInProgress() view returns((uint256,uint256,address,address,bytes32[],uint256,uint256,uint256,bool))
func (_Colosseum *ColosseumSession) GetChallengeInProgress() (TypesChallenge, error) {
	return _Colosseum.Contract.GetChallengeInProgress(&_Colosseum.CallOpts)
}

// GetChallengeInProgress is a free data retrieval call binding the contract method 0xa790d549.
//
// Solidity: function getChallengeInProgress() view returns((uint256,uint256,address,address,bytes32[],uint256,uint256,uint256,bool))
func (_Colosseum *ColosseumCallerSession) GetChallengeInProgress() (TypesChallenge, error) {
	return _Colosseum.Contract.GetChallengeInProgress(&_Colosseum.CallOpts)
}

// GetSegmentsLength is a free data retrieval call binding the contract method 0x0002ad2d.
//
// Solidity: function getSegmentsLength(uint256 _turn) view returns(uint256)
func (_Colosseum *ColosseumCaller) GetSegmentsLength(opts *bind.CallOpts, _turn *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getSegmentsLength", _turn)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSegmentsLength is a free data retrieval call binding the contract method 0x0002ad2d.
//
// Solidity: function getSegmentsLength(uint256 _turn) view returns(uint256)
func (_Colosseum *ColosseumSession) GetSegmentsLength(_turn *big.Int) (*big.Int, error) {
	return _Colosseum.Contract.GetSegmentsLength(&_Colosseum.CallOpts, _turn)
}

// GetSegmentsLength is a free data retrieval call binding the contract method 0x0002ad2d.
//
// Solidity: function getSegmentsLength(uint256 _turn) view returns(uint256)
func (_Colosseum *ColosseumCallerSession) GetSegmentsLength(_turn *big.Int) (*big.Int, error) {
	return _Colosseum.Contract.GetSegmentsLength(&_Colosseum.CallOpts, _turn)
}

// GetStatusInProgress is a free data retrieval call binding the contract method 0x647862a0.
//
// Solidity: function getStatusInProgress() view returns(uint8)
func (_Colosseum *ColosseumCaller) GetStatusInProgress(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "getStatusInProgress")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetStatusInProgress is a free data retrieval call binding the contract method 0x647862a0.
//
// Solidity: function getStatusInProgress() view returns(uint8)
func (_Colosseum *ColosseumSession) GetStatusInProgress() (uint8, error) {
	return _Colosseum.Contract.GetStatusInProgress(&_Colosseum.CallOpts)
}

// GetStatusInProgress is a free data retrieval call binding the contract method 0x647862a0.
//
// Solidity: function getStatusInProgress() view returns(uint8)
func (_Colosseum *ColosseumCallerSession) GetStatusInProgress() (uint8, error) {
	return _Colosseum.Contract.GetStatusInProgress(&_Colosseum.CallOpts)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x45eee38f.
//
// Solidity: function isAbleToBisect() view returns(bool)
func (_Colosseum *ColosseumCaller) IsAbleToBisect(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isAbleToBisect")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x45eee38f.
//
// Solidity: function isAbleToBisect() view returns(bool)
func (_Colosseum *ColosseumSession) IsAbleToBisect() (bool, error) {
	return _Colosseum.Contract.IsAbleToBisect(&_Colosseum.CallOpts)
}

// IsAbleToBisect is a free data retrieval call binding the contract method 0x45eee38f.
//
// Solidity: function isAbleToBisect() view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsAbleToBisect() (bool, error) {
	return _Colosseum.Contract.IsAbleToBisect(&_Colosseum.CallOpts)
}

// IsChallengeRelated is a free data retrieval call binding the contract method 0xf971fa82.
//
// Solidity: function isChallengeRelated(address _account) view returns(bool)
func (_Colosseum *ColosseumCaller) IsChallengeRelated(opts *bind.CallOpts, _account common.Address) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isChallengeRelated", _account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChallengeRelated is a free data retrieval call binding the contract method 0xf971fa82.
//
// Solidity: function isChallengeRelated(address _account) view returns(bool)
func (_Colosseum *ColosseumSession) IsChallengeRelated(_account common.Address) (bool, error) {
	return _Colosseum.Contract.IsChallengeRelated(&_Colosseum.CallOpts, _account)
}

// IsChallengeRelated is a free data retrieval call binding the contract method 0xf971fa82.
//
// Solidity: function isChallengeRelated(address _account) view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsChallengeRelated(_account common.Address) (bool, error) {
	return _Colosseum.Contract.IsChallengeRelated(&_Colosseum.CallOpts, _account)
}

// IsInProgress is a free data retrieval call binding the contract method 0x6dfc2fa8.
//
// Solidity: function isInProgress() view returns(bool)
func (_Colosseum *ColosseumCaller) IsInProgress(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "isInProgress")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsInProgress is a free data retrieval call binding the contract method 0x6dfc2fa8.
//
// Solidity: function isInProgress() view returns(bool)
func (_Colosseum *ColosseumSession) IsInProgress() (bool, error) {
	return _Colosseum.Contract.IsInProgress(&_Colosseum.CallOpts)
}

// IsInProgress is a free data retrieval call binding the contract method 0x6dfc2fa8.
//
// Solidity: function isInProgress() view returns(bool)
func (_Colosseum *ColosseumCallerSession) IsInProgress() (bool, error) {
	return _Colosseum.Contract.IsInProgress(&_Colosseum.CallOpts)
}

// LatestChallengeId is a free data retrieval call binding the contract method 0xbf26931f.
//
// Solidity: function latestChallengeId() view returns(uint256)
func (_Colosseum *ColosseumCaller) LatestChallengeId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "latestChallengeId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestChallengeId is a free data retrieval call binding the contract method 0xbf26931f.
//
// Solidity: function latestChallengeId() view returns(uint256)
func (_Colosseum *ColosseumSession) LatestChallengeId() (*big.Int, error) {
	return _Colosseum.Contract.LatestChallengeId(&_Colosseum.CallOpts)
}

// LatestChallengeId is a free data retrieval call binding the contract method 0xbf26931f.
//
// Solidity: function latestChallengeId() view returns(uint256)
func (_Colosseum *ColosseumCallerSession) LatestChallengeId() (*big.Int, error) {
	return _Colosseum.Contract.LatestChallengeId(&_Colosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Colosseum.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Colosseum *ColosseumCallerSession) Version() (string, error) {
	return _Colosseum.Contract.Version(&_Colosseum.CallOpts)
}

// AsserterTimeout is a paid mutator transaction binding the contract method 0x7c96ea71.
//
// Solidity: function asserterTimeout() returns()
func (_Colosseum *ColosseumTransactor) AsserterTimeout(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "asserterTimeout")
}

// AsserterTimeout is a paid mutator transaction binding the contract method 0x7c96ea71.
//
// Solidity: function asserterTimeout() returns()
func (_Colosseum *ColosseumSession) AsserterTimeout() (*types.Transaction, error) {
	return _Colosseum.Contract.AsserterTimeout(&_Colosseum.TransactOpts)
}

// AsserterTimeout is a paid mutator transaction binding the contract method 0x7c96ea71.
//
// Solidity: function asserterTimeout() returns()
func (_Colosseum *ColosseumTransactorSession) AsserterTimeout() (*types.Transaction, error) {
	return _Colosseum.Contract.AsserterTimeout(&_Colosseum.TransactOpts)
}

// Bisect is a paid mutator transaction binding the contract method 0x71cc6a4c.
//
// Solidity: function bisect(uint256 _pos, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactor) Bisect(opts *bind.TransactOpts, _pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "bisect", _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0x71cc6a4c.
//
// Solidity: function bisect(uint256 _pos, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumSession) Bisect(_pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _pos, _segments)
}

// Bisect is a paid mutator transaction binding the contract method 0x71cc6a4c.
//
// Solidity: function bisect(uint256 _pos, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactorSession) Bisect(_pos *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.Bisect(&_Colosseum.TransactOpts, _pos, _segments)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x572419a0.
//
// Solidity: function challengerTimeout(uint256 _challengeId) returns()
func (_Colosseum *ColosseumTransactor) ChallengerTimeout(opts *bind.TransactOpts, _challengeId *big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "challengerTimeout", _challengeId)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x572419a0.
//
// Solidity: function challengerTimeout(uint256 _challengeId) returns()
func (_Colosseum *ColosseumSession) ChallengerTimeout(_challengeId *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _challengeId)
}

// ChallengerTimeout is a paid mutator transaction binding the contract method 0x572419a0.
//
// Solidity: function challengerTimeout(uint256 _challengeId) returns()
func (_Colosseum *ColosseumTransactorSession) ChallengerTimeout(_challengeId *big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ChallengerTimeout(&_Colosseum.TransactOpts, _challengeId)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x7ecc14be.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactor) CreateChallenge(opts *bind.TransactOpts, _outputIndex *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "createChallenge", _outputIndex, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x7ecc14be.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumSession) CreateChallenge(_outputIndex *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _segments)
}

// CreateChallenge is a paid mutator transaction binding the contract method 0x7ecc14be.
//
// Solidity: function createChallenge(uint256 _outputIndex, bytes32[] _segments) payable returns()
func (_Colosseum *ColosseumTransactorSession) CreateChallenge(_outputIndex *big.Int, _segments [][32]byte) (*types.Transaction, error) {
	return _Colosseum.Contract.CreateChallenge(&_Colosseum.TransactOpts, _outputIndex, _segments)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactor) Initialize(opts *bind.TransactOpts, _segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "initialize", _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// Initialize is a paid mutator transaction binding the contract method 0x6fe0e559.
//
// Solidity: function initialize(uint256[] _segmentsLengths) returns()
func (_Colosseum *ColosseumTransactorSession) Initialize(_segmentsLengths []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.Initialize(&_Colosseum.TransactOpts, _segmentsLengths)
}

// ProveFault is a paid mutator transaction binding the contract method 0x2da294fa.
//
// Solidity: function proveFault(uint256 _pos, bytes32 _outputRoot, uint256[] _proof, uint256[] _pair) payable returns()
func (_Colosseum *ColosseumTransactor) ProveFault(opts *bind.TransactOpts, _pos *big.Int, _outputRoot [32]byte, _proof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.contract.Transact(opts, "proveFault", _pos, _outputRoot, _proof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x2da294fa.
//
// Solidity: function proveFault(uint256 _pos, bytes32 _outputRoot, uint256[] _proof, uint256[] _pair) payable returns()
func (_Colosseum *ColosseumSession) ProveFault(_pos *big.Int, _outputRoot [32]byte, _proof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _pos, _outputRoot, _proof, _pair)
}

// ProveFault is a paid mutator transaction binding the contract method 0x2da294fa.
//
// Solidity: function proveFault(uint256 _pos, bytes32 _outputRoot, uint256[] _proof, uint256[] _pair) payable returns()
func (_Colosseum *ColosseumTransactorSession) ProveFault(_pos *big.Int, _outputRoot [32]byte, _proof []*big.Int, _pair []*big.Int) (*types.Transaction, error) {
	return _Colosseum.Contract.ProveFault(&_Colosseum.TransactOpts, _pos, _outputRoot, _proof, _pair)
}

// ColosseumBisectedIterator is returned from FilterBisected and is used to iterate over the raw logs and unpacked data for Bisected events raised by the Colosseum contract.
type ColosseumBisectedIterator struct {
	Event *ColosseumBisected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumBisectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumBisected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumBisected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumBisectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumBisectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumBisected represents a Bisected event raised by the Colosseum contract.
type ColosseumBisected struct {
	ChallengeId *big.Int
	Turn        *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBisected is a free log retrieval operation binding the contract event 0xda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38.
//
// Solidity: event Bisected(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterBisected(opts *bind.FilterOpts, challengeId []*big.Int) (*ColosseumBisectedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Bisected", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumBisectedIterator{contract: _Colosseum.contract, event: "Bisected", logs: logs, sub: sub}, nil
}

// WatchBisected is a free log subscription operation binding the contract event 0xda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38.
//
// Solidity: event Bisected(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchBisected(opts *bind.WatchOpts, sink chan<- *ColosseumBisected, challengeId []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Bisected", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumBisected)
				if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBisected is a log parse operation binding the contract event 0xda015ff40ecf6bb2ba94f0726a6c0629032bba83903f784dcd4f0a7107319d38.
//
// Solidity: event Bisected(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseBisected(log types.Log) (*ColosseumBisected, error) {
	event := new(ColosseumBisected)
	if err := _Colosseum.contract.UnpackLog(event, "Bisected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumChallengeCreatedIterator is returned from FilterChallengeCreated and is used to iterate over the raw logs and unpacked data for ChallengeCreated events raised by the Colosseum contract.
type ColosseumChallengeCreatedIterator struct {
	Event *ColosseumChallengeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumChallengeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumChallengeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumChallengeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumChallengeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumChallengeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumChallengeCreated represents a ChallengeCreated event raised by the Colosseum contract.
type ColosseumChallengeCreated struct {
	ChallengeId *big.Int
	Challenger  common.Address
	OutputIndex *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterChallengeCreated is a free log retrieval operation binding the contract event 0x7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb.
//
// Solidity: event ChallengeCreated(uint256 indexed challengeId, address indexed challenger, uint256 indexed outputIndex, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterChallengeCreated(opts *bind.FilterOpts, challengeId []*big.Int, challenger []common.Address, outputIndex []*big.Int) (*ColosseumChallengeCreatedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}
	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ChallengeCreated", challengeIdRule, challengerRule, outputIndexRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumChallengeCreatedIterator{contract: _Colosseum.contract, event: "ChallengeCreated", logs: logs, sub: sub}, nil
}

// WatchChallengeCreated is a free log subscription operation binding the contract event 0x7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb.
//
// Solidity: event ChallengeCreated(uint256 indexed challengeId, address indexed challenger, uint256 indexed outputIndex, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchChallengeCreated(opts *bind.WatchOpts, sink chan<- *ColosseumChallengeCreated, challengeId []*big.Int, challenger []common.Address, outputIndex []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}
	var challengerRule []interface{}
	for _, challengerItem := range challenger {
		challengerRule = append(challengerRule, challengerItem)
	}
	var outputIndexRule []interface{}
	for _, outputIndexItem := range outputIndex {
		outputIndexRule = append(outputIndexRule, outputIndexItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ChallengeCreated", challengeIdRule, challengerRule, outputIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumChallengeCreated)
				if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeCreated is a log parse operation binding the contract event 0x7c9c42ea4a98ff02e597498c394568923c74c2d3e031718ad08dbb59a42f03eb.
//
// Solidity: event ChallengeCreated(uint256 indexed challengeId, address indexed challenger, uint256 indexed outputIndex, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseChallengeCreated(log types.Log) (*ColosseumChallengeCreated, error) {
	event := new(ColosseumChallengeCreated)
	if err := _Colosseum.contract.UnpackLog(event, "ChallengeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumClosedIterator is returned from FilterClosed and is used to iterate over the raw logs and unpacked data for Closed events raised by the Colosseum contract.
type ColosseumClosedIterator struct {
	Event *ColosseumClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumClosed represents a Closed event raised by the Colosseum contract.
type ColosseumClosed struct {
	ChallengeId *big.Int
	Turn        *big.Int
	Timestamp   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterClosed is a free log retrieval operation binding the contract event 0x95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25.
//
// Solidity: event Closed(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) FilterClosed(opts *bind.FilterOpts, challengeId []*big.Int) (*ColosseumClosedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Closed", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumClosedIterator{contract: _Colosseum.contract, event: "Closed", logs: logs, sub: sub}, nil
}

// WatchClosed is a free log subscription operation binding the contract event 0x95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25.
//
// Solidity: event Closed(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) WatchClosed(opts *bind.WatchOpts, sink chan<- *ColosseumClosed, challengeId []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Closed", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumClosed)
				if err := _Colosseum.contract.UnpackLog(event, "Closed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClosed is a log parse operation binding the contract event 0x95b630824ad6e94ddef40548c81e9ea6d2359c3c61fc11f37e1633bb7b1e3e25.
//
// Solidity: event Closed(uint256 indexed challengeId, uint256 turn, uint256 timestamp)
func (_Colosseum *ColosseumFilterer) ParseClosed(log types.Log) (*ColosseumClosed, error) {
	event := new(ColosseumClosed)
	if err := _Colosseum.contract.UnpackLog(event, "Closed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Colosseum contract.
type ColosseumInitializedIterator struct {
	Event *ColosseumInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumInitialized represents a Initialized event raised by the Colosseum contract.
type ColosseumInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) FilterInitialized(opts *bind.FilterOpts) (*ColosseumInitializedIterator, error) {

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ColosseumInitializedIterator{contract: _Colosseum.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ColosseumInitialized) (event.Subscription, error) {

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumInitialized)
				if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Colosseum *ColosseumFilterer) ParseInitialized(log types.Log) (*ColosseumInitialized, error) {
	event := new(ColosseumInitialized)
	if err := _Colosseum.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ColosseumProofCompletedIterator is returned from FilterProofCompleted and is used to iterate over the raw logs and unpacked data for ProofCompleted events raised by the Colosseum contract.
type ColosseumProofCompletedIterator struct {
	Event *ColosseumProofCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ColosseumProofCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ColosseumProofCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ColosseumProofCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ColosseumProofCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ColosseumProofCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ColosseumProofCompleted represents a ProofCompleted event raised by the Colosseum contract.
type ColosseumProofCompleted struct {
	ChallengeId *big.Int
	OutputIndex *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProofCompleted is a free log retrieval operation binding the contract event 0x69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8.
//
// Solidity: event ProofCompleted(uint256 indexed challengeId, uint256 outputIndex)
func (_Colosseum *ColosseumFilterer) FilterProofCompleted(opts *bind.FilterOpts, challengeId []*big.Int) (*ColosseumProofCompletedIterator, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.FilterLogs(opts, "ProofCompleted", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return &ColosseumProofCompletedIterator{contract: _Colosseum.contract, event: "ProofCompleted", logs: logs, sub: sub}, nil
}

// WatchProofCompleted is a free log subscription operation binding the contract event 0x69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8.
//
// Solidity: event ProofCompleted(uint256 indexed challengeId, uint256 outputIndex)
func (_Colosseum *ColosseumFilterer) WatchProofCompleted(opts *bind.WatchOpts, sink chan<- *ColosseumProofCompleted, challengeId []*big.Int) (event.Subscription, error) {

	var challengeIdRule []interface{}
	for _, challengeIdItem := range challengeId {
		challengeIdRule = append(challengeIdRule, challengeIdItem)
	}

	logs, sub, err := _Colosseum.contract.WatchLogs(opts, "ProofCompleted", challengeIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ColosseumProofCompleted)
				if err := _Colosseum.contract.UnpackLog(event, "ProofCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofCompleted is a log parse operation binding the contract event 0x69d9e1c5b1fcaa7459901098451b55565e95edd555af468e810e6413f5a6cca8.
//
// Solidity: event ProofCompleted(uint256 indexed challengeId, uint256 outputIndex)
func (_Colosseum *ColosseumFilterer) ParseProofCompleted(log types.Log) (*ColosseumProofCompleted, error) {
	event := new(ColosseumProofCompleted)
	if err := _Colosseum.contract.UnpackLog(event, "ProofCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
