// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SecurityCouncilTokenMetaData contains all meta data concerning the SecurityCouncilToken contract.
var SecurityCouncilTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b5060006001816200002162000033565b60809290925260a05260c052620000f4565b600054610100900460ff1615620000a05760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000f2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160a05160c0516146d1620001246000396000610ab901526000610a9001526000610a6701526146d16000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c806370a08231116101605780639ab24eb0116100d8578063c4d66de81161008c578063d204c45e11610071578063d204c45e14610538578063e985e9c51461054b578063f2fde38b1461058757600080fd5b8063c4d66de814610512578063c87b56dd1461052557600080fd5b8063b45a3c0e116100bd578063b45a3c0e146104d9578063b88d4fde146104ec578063c3cda520146104ff57600080fd5b80639ab24eb0146104b3578063a22cb465146104c657600080fd5b806384b0196e1161012f5780638e539e8c116101145780638e539e8c1461047957806391ddadf41461048c57806395d89b41146104ab57600080fd5b806384b0196e1461044c5780638da5cb5b1461046757600080fd5b806370a0823114610416578063715018a6146104295780637ecebe00146104315780638456cb591461044457600080fd5b80633f4ba83a1161020e57806354fd4d50116101c25780635c19a95c116101a75780635c19a95c146103e55780635c975abb146103f85780636352211e1461040357600080fd5b806354fd4d50146103b0578063587cde1e146103b857600080fd5b806342966c68116101f357806342966c68146103825780634bf5d7e9146103955780634f6ccce71461039d57600080fd5b80633f4ba83a1461036757806342842e0e1461036f57600080fd5b806318160ddd116102655780632f745c591161024a5780632f745c59146103395780633644e5151461034c5780633a46b1a81461035457600080fd5b806318160ddd1461031457806323b872dd1461032657600080fd5b806301ffc9a71461029757806306fdde03146102bf578063081812fc146102d4578063095ea7b3146102ff575b600080fd5b6102aa6102a5366004613e06565b61059a565b60405190151581526020015b60405180910390f35b6102c76105f6565b6040516102b69190613e99565b6102e76102e2366004613eac565b610688565b6040516001600160a01b0390911681526020016102b6565b61031261030d366004613ee1565b6106af565b005b6099545b6040519081526020016102b6565b610312610334366004613f0b565b6106fb565b610318610347366004613ee1565b610749565b6103186107f6565b610318610362366004613ee1565b610805565b6103126108b5565b61031261037d366004613f0b565b6108c7565b610312610390366004613eac565b610910565b6102c7610924565b6103186103ab366004613eac565b6109bc565b6102c7610a60565b6102e76103c6366004613f47565b6001600160a01b03908116600090815261019360205260409020541690565b6103126103f3366004613f47565b610b03565b60fb5460ff166102aa565b6102e7610411366004613eac565b610b0e565b610318610424366004613f47565b610b73565b610312610c0d565b61031861043f366004613f47565b610c1f565b610312610c3e565b610454610c4e565b6040516102b69796959493929190613f62565b61012d546001600160a01b03166102e7565b610318610487366004613eac565b610d12565b610494610dab565b60405165ffffffffffff90911681526020016102b6565b6102c7610db6565b6103186104c1366004613f47565b610dc5565b6103126104d4366004614014565b610de7565b6102aa6104e7366004613eac565b610e2f565b6103126104fa366004614113565b610e89565b61031261050d36600461418f565b610ed9565b610312610520366004613f47565b61100f565b6102c7610533366004613eac565b6111d7565b6103126105463660046141ef565b6111e2565b6102aa610559366004614251565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b610312610595366004613f47565b61121b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fb45a3c0e0000000000000000000000000000000000000000000000000000000014806105f057506105f0826112a8565b92915050565b60606065805461060590614284565b80601f016020809104026020016040519081016040528092919081815260200182805461063190614284565b801561067e5780601f106106535761010080835404028352916020019161067e565b820191906000526020600020905b81548152906001019060200180831161066157829003601f168201915b5050505050905090565b6000610693826112fe565b506000908152606960205260409020546001600160a01b031690565b6101f85460ff16156106ed576040517fbd291a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f78282611362565b5050565b6101f85460ff1615610739576040517fbd291a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61074483838361148e565b505050565b600061075483610b73565b82106107cd5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6000610800611515565b905090565b600061080f610dab565b65ffffffffffff1682106108655760405162461bcd60e51b815260206004820152601460248201527f566f7465733a20667574757265206c6f6f6b757000000000000000000000000060448201526064016107c4565b6108906108718361151f565b6001600160a01b0385166000908152610194602052604090209061159f565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b6108bd611669565b6108c56116c4565b565b6101f85460ff1615610905576040517fbd291a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610744838383611716565b610918611669565b61092181611731565b50565b60604361092f610dab565b65ffffffffffff16146109845760405162461bcd60e51b815260206004820152601860248201527f566f7465733a2062726f6b656e20636c6f636b206d6f6465000000000000000060448201526064016107c4565b5060408051808201909152601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000602082015290565b60006109c760995490565b8210610a3b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016107c4565b60998281548110610a4e57610a4e6142d1565b90600052602060002001549050919050565b6060610a8b7f000000000000000000000000000000000000000000000000000000000000000061173a565b610ab47f000000000000000000000000000000000000000000000000000000000000000061173a565b610add7f000000000000000000000000000000000000000000000000000000000000000061173a565b604051602001610aef93929190614300565b604051602081830303815290604052905090565b336106f781836117db565b6000818152606760205260408120546001600160a01b0316806105f05760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107c4565b60006001600160a01b038216610bf15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016107c4565b506001600160a01b031660009081526068602052604090205490565b610c15611669565b6108c56000611866565b6001600160a01b038116600090815261019660205260408120546105f0565b610c46611669565b6108c56118d1565b60006060806000806000606061015f546000801b148015610c70575061016054155b610cbc5760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a6564000000000000000000000060448201526064016107c4565b610cc461190e565b610ccc61191e565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6000610d1c610dab565b65ffffffffffff168210610d725760405162461bcd60e51b815260206004820152601460248201527f566f7465733a20667574757265206c6f6f6b757000000000000000000000000060448201526064016107c4565b610d87610d7e8361151f565b6101959061159f565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1692915050565b60006108004361192e565b60606066805461060590614284565b6001600160a01b038116600090815261019460205260408120610d87906119ac565b6101f85460ff1615610e25576040517fbd291a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f782826119fc565b6000818152606760205260408120546001600160a01b0316610e7d576040517fae9a63f500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50506101f85460ff1690565b6101f85460ff1615610ec7576040517fbd291a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ed384848484611a07565b50505050565b83421115610f295760405162461bcd60e51b815260206004820152601860248201527f566f7465733a207369676e61747572652065787069726564000000000000000060448201526064016107c4565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610fa390610f9b9060a00160405160208183030381529060405280519060200120611a8f565b858585611ad7565b9050610fae81611b01565b8614610ffc5760405162461bcd60e51b815260206004820152601460248201527f566f7465733a20696e76616c6964206e6f6e636500000000000000000000000060448201526064016107c4565b61100681886117db565b50505050505050565b600054610100900460ff161580801561102f5750600054600160ff909116105b806110495750303b158015611049575060005460ff166001145b6110bb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107c4565b6000805460ff1916600117905580156110fb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6111706040518060400160405280601481526020017f4b726f6d615365637572697479436f756e63696c0000000000000000000000008152506040518060400160405280600381526020017f4b5343000000000000000000000000000000000000000000000000000000000081525084611b2a565b80156106f757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60606105f082611c23565b6111ea611669565b60006111f66101f75490565b90506112076101f780546001019055565b6112118382611d2b565b6107448183611d45565b611223611669565b6001600160a01b03811661129f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107c4565b61092181611866565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f490649060000000000000000000000000000000000000000000000000000000014806105f057506105f082611e18565b6000818152606760205260409020546001600160a01b03166109215760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016107c4565b600061136d82610b0e565b9050806001600160a01b0316836001600160a01b0316036113f65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016107c4565b336001600160a01b038216148061141257506114128133610559565b6114845760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107c4565b6107448383611e6e565b6114983382611ef4565b61150a5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016107c4565b610744838383611f72565b60006108006121c8565b600063ffffffff82111561159b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016107c4565b5090565b8154600090818160058111156115fc5760006115ba8461223c565b6115c490856143a5565b60008881526020902090915081015463ffffffff90811690871610156115ec578091506115fa565b6115f78160016143bc565b92505b505b600061160a87878585612324565b9050801561165b5761162f876116216001846143a5565b600091825260209091200190565b5464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661165e565b60005b979650505050505050565b61012d546001600160a01b031633146108c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c4565b6116cc61237a565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61074483838360405180602001604052806000815250610e89565b610921816123cc565b606060006117478361240c565b600101905060008167ffffffffffffffff81111561176757611767614050565b6040519080825280601f01601f191660200182016040528015611791576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461179b575b509392505050565b6001600160a01b038281166000818152610193602052604080822080548686167fffffffffffffffffffffffff0000000000000000000000000000000000000000821681179092559151919094169392849290917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46107448183611861866124ee565b6124f9565b61012d80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6118d96126bb565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116f93390565b6060610161805461060590614284565b6060610162805461060590614284565b600065ffffffffffff82111561159b5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201527f382062697473000000000000000000000000000000000000000000000000000060648201526084016107c4565b805460009080156119f2576119c6836116216001846143a5565b5464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166119f5565b60005b9392505050565b6106f733838361270e565b611a113383611ef4565b611a835760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016107c4565b610ed3848484846127dc565b60006105f0611a9c611515565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000611ae887878787612865565b91509150611af581612947565b5090505b949350505050565b6001600160a01b0381166000908152610196602052604090208054600181018255905b50919050565b600054610100900460ff16611ba75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b611bb16001612aac565b611bbb8383612b3d565b611bc3612bc4565b611bcb612bc4565b611bd3612c41565b611c12836040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612cc6565b611c1a612bc4565b61074481611866565b6060611c2e826112fe565b600082815260c9602052604081208054611c4790614284565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7390614284565b8015611cc05780601f10611c9557610100808354040283529160200191611cc0565b820191906000526020600020905b815481529060010190602001808311611ca357829003601f168201915b505050505090506000611cde60408051602081019091526000815290565b90508051600003611cf0575092915050565b815115611d22578082604051602001611d0a929190614403565b60405160208183030381529060405292505050919050565b611af984612d4d565b6106f7828260405180602001604052806000815250612dc0565b6000828152606760205260409020546001600160a01b0316611dcf5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e00000000000000000000000000000000000060648201526084016107c4565b600082815260c960205260409020611de78282614480565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020016111cb565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806105f057506105f082612e49565b600081815260696020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384169081179091558190611ebb82610b0e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611f0083610b0e565b9050806001600160a01b0316846001600160a01b03161480611f4757506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80611af95750836001600160a01b0316611f6084610688565b6001600160a01b031614949350505050565b826001600160a01b0316611f8582610b0e565b6001600160a01b0316146120015760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016107c4565b6001600160a01b03821661207c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016107c4565b6120898383836001612f2c565b826001600160a01b031661209c82610b0e565b6001600160a01b0316146121185760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016107c4565b600081815260696020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a46107448383836001612f40565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6121f3612f4c565b6121fb612fa6565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60008160000361224e57506000919050565b6000600161225b84612fd8565b901c6001901b90506001818481612274576122746143d4565b048201901c9050600181848161228c5761228c6143d4565b048201901c905060018184816122a4576122a46143d4565b048201901c905060018184816122bc576122bc6143d4565b048201901c905060018184816122d4576122d46143d4565b048201901c905060018184816122ec576122ec6143d4565b048201901c90506001818481612304576123046143d4565b048201901c90506119f58182858161231e5761231e6143d4565b0461306c565b60005b818310156117d357600061233b8484613082565b60008781526020902090915063ffffffff86169082015463ffffffff16111561236657809250612374565b6123718160016143bc565b93505b50612327565b60fb5460ff166108c55760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016107c4565b6123d58161309d565b600081815260c96020526040902080546123ee90614284565b15905061092157600081815260c96020526040812061092191613d8e565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612455577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612481576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061249f57662386f26fc10000830492506010015b6305f5e10083106124b7576305f5e100830492506008015b61271083106124cb57612710830492506004015b606483106124dd576064830492506002015b600a83106105f05760010192915050565b60006105f082610b73565b816001600160a01b0316836001600160a01b03161415801561251b5750600081115b15610744576001600160a01b038316156125ee576001600160a01b038316600090815261019460205260408120819061255f9061316261255a8661316e565b613202565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1691507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516125e3929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610744576001600160a01b03821660009081526101946020526040812081906126289061324b61255a8661316e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1691507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516126ac929190918252602082015260400190565b60405180910390a25050505050565b60fb5460ff16156108c55760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016107c4565b816001600160a01b0316836001600160a01b03160361276f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107c4565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6127e7848484611f72565b6127f384848484613257565b610ed35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107c4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561289c575060009050600361293e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156128f0573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166129375760006001925092505061293e565b9150600090505b94509492505050565b600081600481111561295b5761295b61455e565b036129635750565b60018160048111156129775761297761455e565b036129c45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107c4565b60028160048111156129d8576129d861455e565b03612a255760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107c4565b6003816004811115612a3957612a3961455e565b036109215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016107c4565b600054610100900460ff16612b295760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b6101f8805460ff1916911515919091179055565b600054610100900460ff16612bba5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b6106f78282613413565b600054610100900460ff166108c55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b600054610100900460ff16612cbe5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b6108c56134a9565b600054610100900460ff16612d435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b6106f78282613532565b6060612d58826112fe565b6000612d6f60408051602081019091526000815290565b90506000815111612d8f57604051806020016040528060008152506119f5565b80612d99846135db565b604051602001612daa929190614403565b6040516020818303038152906040529392505050565b612dca8383613679565b612dd76000848484613257565b6107445760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107c4565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480612edc57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806105f057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105f0565b612f346126bb565b610ed384848484613834565b610ed384848484613970565b600080612f5761190e565b805190915015612f6e578051602090910120919050565b61015f548015612f7e5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080612fb161191e565b805190915015612fc8578051602090910120919050565b610160548015612f7e5792915050565b600080608083901c15612fed57608092831c92015b604083901c15612fff57604092831c92015b602083901c1561301157602092831c92015b601083901c1561302357601092831c92015b600883901c1561303557600892831c92015b600483901c1561304757600492831c92015b600283901c1561305957600292831c92015b600183901c156105f05760010192915050565b600081831061307b57816119f5565b5090919050565b6000613091600284841861458d565b6119f5908484166143bc565b60006130a882610b0e565b90506130b8816000846001612f2c565b6130c182610b0e565b600083815260696020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0385168085526068845282852080546000190190558785526067909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a46106f7816000846001612f40565b60006119f582846145c8565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561159b5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f323420626974730000000000000000000000000000000000000000000000000060648201526084016107c4565b60008061323e613220613213610dab565b65ffffffffffff1661151f565b61323661322c886119ac565b868863ffffffff16565b879190613980565b915091505b935093915050565b60006119f58284614605565b60006001600160a01b0384163b1561340b576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906132b490339089908890889060040161463c565b6020604051808303816000875af192505050801561330d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261330a91810190614678565b60015b6133c0573d80801561333b576040519150601f19603f3d011682016040523d82523d6000602084013e613340565b606091505b5080516000036133b85760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016107c4565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611af9565b506001611af9565b600054610100900460ff166134905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b606561349c8382614480565b5060666107448282614480565b600054610100900460ff166135265760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b60fb805460ff19169055565b600054610100900460ff166135af5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c4565b6101616135bc8382614480565b506101626135ca8282614480565b5050600061015f8190556101605550565b606060006135e88361240c565b600101905060008167ffffffffffffffff81111561360857613608614050565b6040519080825280601f01601f191660200182016040528015613632576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084156117d35761363c565b6001600160a01b0382166136cf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107c4565b6000818152606760205260409020546001600160a01b0316156137345760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107c4565b613742600083836001612f2c565b6000818152606760205260409020546001600160a01b0316156137a75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107c4565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46106f7600083836001612f40565b60018111156138ab5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f72746564000000000000000000000060648201526084016107c4565b816001600160a01b0385166139075761390281609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61392a565b836001600160a01b0316856001600160a01b03161461392a5761392a858261398e565b6001600160a01b0384166139465761394181613a2b565b613969565b846001600160a01b0316846001600160a01b031614613969576139698482613ada565b5050505050565b61397b848483613b1e565b610ed3565b60008061323e858585613b97565b6000600161399b84610b73565b6139a591906143a5565b6000838152609860205260409020549091508082146139f8576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090613a3d906001906143a5565b6000838152609a602052604081205460998054939450909284908110613a6557613a656142d1565b906000526020600020015490508060998381548110613a8657613a866142d1565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480613abe57613abe614695565b6001900381819060005260206000200160009055905550505050565b6000613ae583610b73565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6001600160a01b038316613b4157613b3e61019561324b61255a8461316e565b50505b6001600160a01b038216613b6457613b6161019561316261255a8461316e565b50505b6001600160a01b0383811660009081526101936020526040808220548584168352912054610744929182169116836124f9565b825460009081908015613d1f576000613bb5876116216001856143a5565b60408051808201909152905463ffffffff8082168084526401000000009092047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660208401529192509087161015613c4c5760405162461bcd60e51b815260206004820152601b60248201527f436865636b706f696e743a2064656372656173696e67206b657973000000000060448201526064016107c4565b805163ffffffff808816911603613caa5784613c6d886116216001866143a5565b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092166401000000000263ffffffff909216919091179055613d0f565b6040805180820190915263ffffffff80881682527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b6020015192508391506132439050565b50506040805180820190915263ffffffff80851682527bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80851660208085019182528854600181018a5560008a815291822095519251909316640100000000029190931617920191909155905081613243565b508054613d9a90614284565b6000825580601f10613daa575050565b601f01602090049060005260206000209081019061092191905b8082111561159b5760008155600101613dc4565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461092157600080fd5b600060208284031215613e1857600080fd5b81356119f581613dd8565b60005b83811015613e3e578181015183820152602001613e26565b83811115610ed35750506000910152565b60008151808452613e67816020860160208601613e23565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006119f56020830184613e4f565b600060208284031215613ebe57600080fd5b5035919050565b80356001600160a01b0381168114613edc57600080fd5b919050565b60008060408385031215613ef457600080fd5b613efd83613ec5565b946020939093013593505050565b600080600060608486031215613f2057600080fd5b613f2984613ec5565b9250613f3760208501613ec5565b9150604084013590509250925092565b600060208284031215613f5957600080fd5b6119f582613ec5565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152613f9e60e084018a613e4f565b8381036040850152613fb0818a613e4f565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561400257835183529284019291840191600101613fe6565b50909c9b505050505050505050505050565b6000806040838503121561402757600080fd5b61403083613ec5565b91506020830135801515811461404557600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff8084111561409a5761409a614050565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156140e0576140e0614050565b816040528093508581528686860111156140f957600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561412957600080fd5b61413285613ec5565b935061414060208601613ec5565b925060408501359150606085013567ffffffffffffffff81111561416357600080fd5b8501601f8101871361417457600080fd5b6141838782356020840161407f565b91505092959194509250565b60008060008060008060c087890312156141a857600080fd5b6141b187613ec5565b95506020870135945060408701359350606087013560ff811681146141d557600080fd5b9598949750929560808101359460a0909101359350915050565b6000806040838503121561420257600080fd5b61420b83613ec5565b9150602083013567ffffffffffffffff81111561422757600080fd5b8301601f8101851361423857600080fd5b6142478582356020840161407f565b9150509250929050565b6000806040838503121561426457600080fd5b61426d83613ec5565b915061427b60208401613ec5565b90509250929050565b600181811c9082168061429857607f821691505b602082108103611b24577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008451614312818460208901613e23565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161434e816001850160208a01613e23565b60019201918201528351614369816002840160208801613e23565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156143b7576143b7614376565b500390565b600082198211156143cf576143cf614376565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008351614415818460208801613e23565b835190830190614429818360208801613e23565b01949350505050565b601f82111561074457600081815260208120601f850160051c810160208610156144595750805b601f850160051c820191505b8181101561447857828155600101614465565b505050505050565b815167ffffffffffffffff81111561449a5761449a614050565b6144ae816144a88454614284565b84614432565b602080601f8311600181146144e357600084156144cb5750858301515b600019600386901b1c1916600185901b178555614478565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561453057888601518255948401946001909101908401614511565b508582101561454e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000826145c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838116908316818110156145fd576145fd614376565b039392505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80831681851680830382111561442957614429614376565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261466e6080830184613e4f565b9695505050505050565b60006020828403121561468a57600080fd5b81516119f581613dd8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c634300080f000a",
}

// SecurityCouncilTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use SecurityCouncilTokenMetaData.ABI instead.
var SecurityCouncilTokenABI = SecurityCouncilTokenMetaData.ABI

// SecurityCouncilTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SecurityCouncilTokenMetaData.Bin instead.
var SecurityCouncilTokenBin = SecurityCouncilTokenMetaData.Bin

// DeploySecurityCouncilToken deploys a new Ethereum contract, binding an instance of SecurityCouncilToken to it.
func DeploySecurityCouncilToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SecurityCouncilToken, error) {
	parsed, err := SecurityCouncilTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SecurityCouncilTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SecurityCouncilToken{SecurityCouncilTokenCaller: SecurityCouncilTokenCaller{contract: contract}, SecurityCouncilTokenTransactor: SecurityCouncilTokenTransactor{contract: contract}, SecurityCouncilTokenFilterer: SecurityCouncilTokenFilterer{contract: contract}}, nil
}

// SecurityCouncilToken is an auto generated Go binding around an Ethereum contract.
type SecurityCouncilToken struct {
	SecurityCouncilTokenCaller     // Read-only binding to the contract
	SecurityCouncilTokenTransactor // Write-only binding to the contract
	SecurityCouncilTokenFilterer   // Log filterer for contract events
}

// SecurityCouncilTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type SecurityCouncilTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SecurityCouncilTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SecurityCouncilTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SecurityCouncilTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SecurityCouncilTokenSession struct {
	Contract     *SecurityCouncilToken // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// SecurityCouncilTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SecurityCouncilTokenCallerSession struct {
	Contract *SecurityCouncilTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// SecurityCouncilTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SecurityCouncilTokenTransactorSession struct {
	Contract     *SecurityCouncilTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// SecurityCouncilTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type SecurityCouncilTokenRaw struct {
	Contract *SecurityCouncilToken // Generic contract binding to access the raw methods on
}

// SecurityCouncilTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SecurityCouncilTokenCallerRaw struct {
	Contract *SecurityCouncilTokenCaller // Generic read-only contract binding to access the raw methods on
}

// SecurityCouncilTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SecurityCouncilTokenTransactorRaw struct {
	Contract *SecurityCouncilTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSecurityCouncilToken creates a new instance of SecurityCouncilToken, bound to a specific deployed contract.
func NewSecurityCouncilToken(address common.Address, backend bind.ContractBackend) (*SecurityCouncilToken, error) {
	contract, err := bindSecurityCouncilToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilToken{SecurityCouncilTokenCaller: SecurityCouncilTokenCaller{contract: contract}, SecurityCouncilTokenTransactor: SecurityCouncilTokenTransactor{contract: contract}, SecurityCouncilTokenFilterer: SecurityCouncilTokenFilterer{contract: contract}}, nil
}

// NewSecurityCouncilTokenCaller creates a new read-only instance of SecurityCouncilToken, bound to a specific deployed contract.
func NewSecurityCouncilTokenCaller(address common.Address, caller bind.ContractCaller) (*SecurityCouncilTokenCaller, error) {
	contract, err := bindSecurityCouncilToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenCaller{contract: contract}, nil
}

// NewSecurityCouncilTokenTransactor creates a new write-only instance of SecurityCouncilToken, bound to a specific deployed contract.
func NewSecurityCouncilTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*SecurityCouncilTokenTransactor, error) {
	contract, err := bindSecurityCouncilToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenTransactor{contract: contract}, nil
}

// NewSecurityCouncilTokenFilterer creates a new log filterer instance of SecurityCouncilToken, bound to a specific deployed contract.
func NewSecurityCouncilTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*SecurityCouncilTokenFilterer, error) {
	contract, err := bindSecurityCouncilToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenFilterer{contract: contract}, nil
}

// bindSecurityCouncilToken binds a generic wrapper to an already deployed contract.
func bindSecurityCouncilToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SecurityCouncilTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecurityCouncilToken *SecurityCouncilTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecurityCouncilToken.Contract.SecurityCouncilTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecurityCouncilToken *SecurityCouncilTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SecurityCouncilTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecurityCouncilToken *SecurityCouncilTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SecurityCouncilTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SecurityCouncilToken *SecurityCouncilTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SecurityCouncilToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) CLOCKMODE() (string, error) {
	return _SecurityCouncilToken.Contract.CLOCKMODE(&_SecurityCouncilToken.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) CLOCKMODE() (string, error) {
	return _SecurityCouncilToken.Contract.CLOCKMODE(&_SecurityCouncilToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _SecurityCouncilToken.Contract.DOMAINSEPARATOR(&_SecurityCouncilToken.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _SecurityCouncilToken.Contract.DOMAINSEPARATOR(&_SecurityCouncilToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.BalanceOf(&_SecurityCouncilToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.BalanceOf(&_SecurityCouncilToken.CallOpts, owner)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Clock() (*big.Int, error) {
	return _SecurityCouncilToken.Contract.Clock(&_SecurityCouncilToken.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Clock() (*big.Int, error) {
	return _SecurityCouncilToken.Contract.Clock(&_SecurityCouncilToken.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Delegates(account common.Address) (common.Address, error) {
	return _SecurityCouncilToken.Contract.Delegates(&_SecurityCouncilToken.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _SecurityCouncilToken.Contract.Delegates(&_SecurityCouncilToken.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _SecurityCouncilToken.Contract.Eip712Domain(&_SecurityCouncilToken.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _SecurityCouncilToken.Contract.Eip712Domain(&_SecurityCouncilToken.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _SecurityCouncilToken.Contract.GetApproved(&_SecurityCouncilToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _SecurityCouncilToken.Contract.GetApproved(&_SecurityCouncilToken.CallOpts, tokenId)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.GetPastTotalSupply(&_SecurityCouncilToken.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.GetPastTotalSupply(&_SecurityCouncilToken.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.GetPastVotes(&_SecurityCouncilToken.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.GetPastVotes(&_SecurityCouncilToken.CallOpts, account, timepoint)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) GetVotes(account common.Address) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.GetVotes(&_SecurityCouncilToken.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.GetVotes(&_SecurityCouncilToken.CallOpts, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _SecurityCouncilToken.Contract.IsApprovedForAll(&_SecurityCouncilToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _SecurityCouncilToken.Contract.IsApprovedForAll(&_SecurityCouncilToken.CallOpts, owner, operator)
}

// Locked is a free data retrieval call binding the contract method 0xb45a3c0e.
//
// Solidity: function locked(uint256 tokenId) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Locked(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "locked", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Locked is a free data retrieval call binding the contract method 0xb45a3c0e.
//
// Solidity: function locked(uint256 tokenId) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Locked(tokenId *big.Int) (bool, error) {
	return _SecurityCouncilToken.Contract.Locked(&_SecurityCouncilToken.CallOpts, tokenId)
}

// Locked is a free data retrieval call binding the contract method 0xb45a3c0e.
//
// Solidity: function locked(uint256 tokenId) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Locked(tokenId *big.Int) (bool, error) {
	return _SecurityCouncilToken.Contract.Locked(&_SecurityCouncilToken.CallOpts, tokenId)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Name() (string, error) {
	return _SecurityCouncilToken.Contract.Name(&_SecurityCouncilToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Name() (string, error) {
	return _SecurityCouncilToken.Contract.Name(&_SecurityCouncilToken.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Nonces(owner common.Address) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.Nonces(&_SecurityCouncilToken.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.Nonces(&_SecurityCouncilToken.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Owner() (common.Address, error) {
	return _SecurityCouncilToken.Contract.Owner(&_SecurityCouncilToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Owner() (common.Address, error) {
	return _SecurityCouncilToken.Contract.Owner(&_SecurityCouncilToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _SecurityCouncilToken.Contract.OwnerOf(&_SecurityCouncilToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _SecurityCouncilToken.Contract.OwnerOf(&_SecurityCouncilToken.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Paused() (bool, error) {
	return _SecurityCouncilToken.Contract.Paused(&_SecurityCouncilToken.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Paused() (bool, error) {
	return _SecurityCouncilToken.Contract.Paused(&_SecurityCouncilToken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SecurityCouncilToken.Contract.SupportsInterface(&_SecurityCouncilToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _SecurityCouncilToken.Contract.SupportsInterface(&_SecurityCouncilToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Symbol() (string, error) {
	return _SecurityCouncilToken.Contract.Symbol(&_SecurityCouncilToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Symbol() (string, error) {
	return _SecurityCouncilToken.Contract.Symbol(&_SecurityCouncilToken.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.TokenByIndex(&_SecurityCouncilToken.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.TokenByIndex(&_SecurityCouncilToken.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.TokenOfOwnerByIndex(&_SecurityCouncilToken.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _SecurityCouncilToken.Contract.TokenOfOwnerByIndex(&_SecurityCouncilToken.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _SecurityCouncilToken.Contract.TokenURI(&_SecurityCouncilToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _SecurityCouncilToken.Contract.TokenURI(&_SecurityCouncilToken.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) TotalSupply() (*big.Int, error) {
	return _SecurityCouncilToken.Contract.TotalSupply(&_SecurityCouncilToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _SecurityCouncilToken.Contract.TotalSupply(&_SecurityCouncilToken.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _SecurityCouncilToken.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Version() (string, error) {
	return _SecurityCouncilToken.Contract.Version(&_SecurityCouncilToken.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_SecurityCouncilToken *SecurityCouncilTokenCallerSession) Version() (string, error) {
	return _SecurityCouncilToken.Contract.Version(&_SecurityCouncilToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address approved, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) Approve(opts *bind.TransactOpts, approved common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "approve", approved, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address approved, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Approve(approved common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Approve(&_SecurityCouncilToken.TransactOpts, approved, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address approved, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) Approve(approved common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Approve(&_SecurityCouncilToken.TransactOpts, approved, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Burn(&_SecurityCouncilToken.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Burn(&_SecurityCouncilToken.TransactOpts, tokenId)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Delegate(&_SecurityCouncilToken.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Delegate(&_SecurityCouncilToken.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.DelegateBySig(&_SecurityCouncilToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.DelegateBySig(&_SecurityCouncilToken.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "initialize", _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Initialize(&_SecurityCouncilToken.TransactOpts, _owner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _owner) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) Initialize(_owner common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Initialize(&_SecurityCouncilToken.TransactOpts, _owner)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Pause() (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Pause(&_SecurityCouncilToken.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) Pause() (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Pause(&_SecurityCouncilToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.RenounceOwnership(&_SecurityCouncilToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.RenounceOwnership(&_SecurityCouncilToken.TransactOpts)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string uri) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) SafeMint(opts *bind.TransactOpts, to common.Address, uri string) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "safeMint", to, uri)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string uri) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) SafeMint(to common.Address, uri string) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SafeMint(&_SecurityCouncilToken.TransactOpts, to, uri)
}

// SafeMint is a paid mutator transaction binding the contract method 0xd204c45e.
//
// Solidity: function safeMint(address to, string uri) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) SafeMint(to common.Address, uri string) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SafeMint(&_SecurityCouncilToken.TransactOpts, to, uri)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SafeTransferFrom(&_SecurityCouncilToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SafeTransferFrom(&_SecurityCouncilToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SafeTransferFrom0(&_SecurityCouncilToken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SafeTransferFrom0(&_SecurityCouncilToken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SetApprovalForAll(&_SecurityCouncilToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.SetApprovalForAll(&_SecurityCouncilToken.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.TransferFrom(&_SecurityCouncilToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.TransferFrom(&_SecurityCouncilToken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.TransferOwnership(&_SecurityCouncilToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.TransferOwnership(&_SecurityCouncilToken.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SecurityCouncilToken.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenSession) Unpause() (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Unpause(&_SecurityCouncilToken.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_SecurityCouncilToken *SecurityCouncilTokenTransactorSession) Unpause() (*types.Transaction, error) {
	return _SecurityCouncilToken.Contract.Unpause(&_SecurityCouncilToken.TransactOpts)
}

// SecurityCouncilTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenApprovalIterator struct {
	Event *SecurityCouncilTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenApproval represents a Approval event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*SecurityCouncilTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenApprovalIterator{contract: _SecurityCouncilToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenApproval)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseApproval(log types.Log) (*SecurityCouncilTokenApproval, error) {
	event := new(SecurityCouncilTokenApproval)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenApprovalForAllIterator struct {
	Event *SecurityCouncilTokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenApprovalForAll represents a ApprovalForAll event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*SecurityCouncilTokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenApprovalForAllIterator{contract: _SecurityCouncilToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenApprovalForAll)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseApprovalForAll(log types.Log) (*SecurityCouncilTokenApprovalForAll, error) {
	event := new(SecurityCouncilTokenApprovalForAll)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenBatchMetadataUpdateIterator struct {
	Event *SecurityCouncilTokenBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*SecurityCouncilTokenBatchMetadataUpdateIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenBatchMetadataUpdateIterator{contract: _SecurityCouncilToken.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenBatchMetadataUpdate)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseBatchMetadataUpdate(log types.Log) (*SecurityCouncilTokenBatchMetadataUpdate, error) {
	event := new(SecurityCouncilTokenBatchMetadataUpdate)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenDelegateChangedIterator struct {
	Event *SecurityCouncilTokenDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenDelegateChanged represents a DelegateChanged event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*SecurityCouncilTokenDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenDelegateChangedIterator{contract: _SecurityCouncilToken.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenDelegateChanged)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseDelegateChanged(log types.Log) (*SecurityCouncilTokenDelegateChanged, error) {
	event := new(SecurityCouncilTokenDelegateChanged)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenDelegateVotesChangedIterator struct {
	Event *SecurityCouncilTokenDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenDelegateVotesChanged represents a DelegateVotesChanged event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*SecurityCouncilTokenDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenDelegateVotesChangedIterator{contract: _SecurityCouncilToken.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenDelegateVotesChanged)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseDelegateVotesChanged(log types.Log) (*SecurityCouncilTokenDelegateVotesChanged, error) {
	event := new(SecurityCouncilTokenDelegateVotesChanged)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenEIP712DomainChangedIterator struct {
	Event *SecurityCouncilTokenEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenEIP712DomainChanged represents a EIP712DomainChanged event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*SecurityCouncilTokenEIP712DomainChangedIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenEIP712DomainChangedIterator{contract: _SecurityCouncilToken.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenEIP712DomainChanged)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseEIP712DomainChanged(log types.Log) (*SecurityCouncilTokenEIP712DomainChanged, error) {
	event := new(SecurityCouncilTokenEIP712DomainChanged)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenInitializedIterator struct {
	Event *SecurityCouncilTokenInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenInitialized represents a Initialized event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterInitialized(opts *bind.FilterOpts) (*SecurityCouncilTokenInitializedIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenInitializedIterator{contract: _SecurityCouncilToken.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenInitialized) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenInitialized)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseInitialized(log types.Log) (*SecurityCouncilTokenInitialized, error) {
	event := new(SecurityCouncilTokenInitialized)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenLockedIterator is returned from FilterLocked and is used to iterate over the raw logs and unpacked data for Locked events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenLockedIterator struct {
	Event *SecurityCouncilTokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenLocked represents a Locked event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenLocked struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLocked is a free log retrieval operation binding the contract event 0x032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611.
//
// Solidity: event Locked(uint256 tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterLocked(opts *bind.FilterOpts) (*SecurityCouncilTokenLockedIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Locked")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenLockedIterator{contract: _SecurityCouncilToken.contract, event: "Locked", logs: logs, sub: sub}, nil
}

// WatchLocked is a free log subscription operation binding the contract event 0x032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611.
//
// Solidity: event Locked(uint256 tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchLocked(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenLocked) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Locked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenLocked)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Locked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLocked is a log parse operation binding the contract event 0x032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611.
//
// Solidity: event Locked(uint256 tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseLocked(log types.Log) (*SecurityCouncilTokenLocked, error) {
	event := new(SecurityCouncilTokenLocked)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Locked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenMetadataUpdateIterator struct {
	Event *SecurityCouncilTokenMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenMetadataUpdate represents a MetadataUpdate event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*SecurityCouncilTokenMetadataUpdateIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenMetadataUpdateIterator{contract: _SecurityCouncilToken.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenMetadataUpdate)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseMetadataUpdate(log types.Log) (*SecurityCouncilTokenMetadataUpdate, error) {
	event := new(SecurityCouncilTokenMetadataUpdate)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenOwnershipTransferredIterator struct {
	Event *SecurityCouncilTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenOwnershipTransferred represents a OwnershipTransferred event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SecurityCouncilTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenOwnershipTransferredIterator{contract: _SecurityCouncilToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenOwnershipTransferred)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseOwnershipTransferred(log types.Log) (*SecurityCouncilTokenOwnershipTransferred, error) {
	event := new(SecurityCouncilTokenOwnershipTransferred)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenPausedIterator struct {
	Event *SecurityCouncilTokenPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenPaused represents a Paused event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterPaused(opts *bind.FilterOpts) (*SecurityCouncilTokenPausedIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenPausedIterator{contract: _SecurityCouncilToken.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenPaused) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenPaused)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParsePaused(log types.Log) (*SecurityCouncilTokenPaused, error) {
	event := new(SecurityCouncilTokenPaused)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenTransferIterator struct {
	Event *SecurityCouncilTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenTransfer represents a Transfer event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*SecurityCouncilTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenTransferIterator{contract: _SecurityCouncilToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenTransfer)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseTransfer(log types.Log) (*SecurityCouncilTokenTransfer, error) {
	event := new(SecurityCouncilTokenTransfer)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenUnlockedIterator is returned from FilterUnlocked and is used to iterate over the raw logs and unpacked data for Unlocked events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenUnlockedIterator struct {
	Event *SecurityCouncilTokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenUnlocked represents a Unlocked event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenUnlocked struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnlocked is a free log retrieval operation binding the contract event 0xf27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f1842.
//
// Solidity: event Unlocked(uint256 tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterUnlocked(opts *bind.FilterOpts) (*SecurityCouncilTokenUnlockedIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Unlocked")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenUnlockedIterator{contract: _SecurityCouncilToken.contract, event: "Unlocked", logs: logs, sub: sub}, nil
}

// WatchUnlocked is a free log subscription operation binding the contract event 0xf27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f1842.
//
// Solidity: event Unlocked(uint256 tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchUnlocked(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Unlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenUnlocked)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Unlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlocked is a log parse operation binding the contract event 0xf27b6ce5b2f5e68ddb2fd95a8a909d4ecf1daaac270935fff052feacb24f1842.
//
// Solidity: event Unlocked(uint256 tokenId)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseUnlocked(log types.Log) (*SecurityCouncilTokenUnlocked, error) {
	event := new(SecurityCouncilTokenUnlocked)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Unlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SecurityCouncilTokenUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenUnpausedIterator struct {
	Event *SecurityCouncilTokenUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SecurityCouncilTokenUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SecurityCouncilTokenUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SecurityCouncilTokenUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SecurityCouncilTokenUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SecurityCouncilTokenUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SecurityCouncilTokenUnpaused represents a Unpaused event raised by the SecurityCouncilToken contract.
type SecurityCouncilTokenUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) FilterUnpaused(opts *bind.FilterOpts) (*SecurityCouncilTokenUnpausedIterator, error) {

	logs, sub, err := _SecurityCouncilToken.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &SecurityCouncilTokenUnpausedIterator{contract: _SecurityCouncilToken.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *SecurityCouncilTokenUnpaused) (event.Subscription, error) {

	logs, sub, err := _SecurityCouncilToken.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SecurityCouncilTokenUnpaused)
				if err := _SecurityCouncilToken.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_SecurityCouncilToken *SecurityCouncilTokenFilterer) ParseUnpaused(log types.Log) (*SecurityCouncilTokenUnpaused, error) {
	event := new(SecurityCouncilTokenUnpaused)
	if err := _SecurityCouncilToken.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
